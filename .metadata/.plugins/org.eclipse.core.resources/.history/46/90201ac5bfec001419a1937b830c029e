package com.example.link;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;

import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

public class SearchDeviceActivity extends Activity implements OnItemClickListener{


	private BluetoothAdapter blueadapter=null;
	private DeviceReceiver mydevice=new DeviceReceiver();
	private List<String> deviceList=new ArrayList<String>();
	private ListView deviceListview;
	private Button btserch;
	private ArrayAdapter<String> adapter;
	private boolean hasregister=false;
	private BluetoothDevice device = null;
	private BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
	private Context mContext;
	private ToggleButton mTogBtn1;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.finddevice);
		ActivityCollector.addActivity(this);
		setView();
		setBluetooth();
		mContext=this;
		findAvalibleDevice();
		blueadapter.startDiscovery();
	}
	
	private void setView(){
	
		deviceListview=(ListView)findViewById(R.id.devicelist);
		adapter=new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, deviceList);
		deviceListview.setAdapter(adapter);
		deviceListview.setOnItemClickListener(this);
		//btserch=(Button)findViewById(R.id.start_seach);
		//btserch.setOnClickListener(new ClinckMonitor());
		mTogBtn1 = (ToggleButton) findViewById(R.id.mTogBtn1); // 获取到控件
		mTogBtn1.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			@Override
			public void onCheckedChanged(CompoundButton buttonView,
					boolean isChecked) {
				// TODO Auto-generated method stub
				if(isChecked){
					//(ImageView).
					deviceList.clear();
					findAvalibleDevice();
					blueadapter.startDiscovery();
					((ImageView) findViewById(R.id.img_search)).setVisibility(View.VISIBLE);
					((ImageView) findViewById(R.id.img_search1)).setVisibility(View.INVISIBLE);
					
					//选中
				}else{
					blueadapter.cancelDiscovery();
					((ImageView) findViewById(R.id.img_search1)).setVisibility(View.VISIBLE);
					((ImageView) findViewById(R.id.img_search)).setVisibility(View.INVISIBLE);
							
						
					//未选中
				}
			}
		});
		
	}

	@Override
	protected void onStart() {
		//注册蓝牙接收广播
		if(!hasregister){
			hasregister=true;
			IntentFilter filterStart=new IntentFilter(BluetoothDevice.ACTION_FOUND);	
			IntentFilter filterEnd=new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);	
			//IntentFilter filterEnd=new IntentFilter(PAIRING_REQUEST);
			registerReceiver(mydevice, filterStart);
			registerReceiver(mydevice, filterEnd);
		}		
		super.onStart();
	}

	@Override
	protected void onDestroy() {
		if(blueadapter!=null&&blueadapter.isDiscovering()){
			blueadapter.cancelDiscovery();
		}
		if(hasregister){
			hasregister=false;
			unregisterReceiver(mydevice);
		}
		super.onDestroy();
	}
	/**
	 * Setting Up Bluetooth
	 */
	private void setBluetooth(){
		 blueadapter=BluetoothAdapter.getDefaultAdapter();
		 
			if(blueadapter!=null){	//Device support Bluetooth
				//确认开启蓝牙
				if(!blueadapter.isEnabled()){
					//请求用户开启
					Intent intent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
					startActivityForResult(intent, RESULT_FIRST_USER);
					//使蓝牙设备可见，方便配对
					Intent in=new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
					in.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 200);
					startActivity(in);
					//直接开启，不经过提示
					blueadapter.enable();
				}
			}
			else{	//Device does not support Bluetooth
				
				AlertDialog.Builder dialog = new AlertDialog.Builder(this);
				dialog.setTitle("没有蓝牙功能");
				dialog.setMessage("你的设备不支持蓝牙");
				
				dialog.setNegativeButton("取消",
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog, int which) {
								
							}
						});
				dialog.show();
			}
	}
	
	/**
	 * Finding Devices
	 */
	private void findAvalibleDevice(){
		//获取可配对蓝牙设备
		Set<BluetoothDevice> device=blueadapter.getBondedDevices();
		
		if(blueadapter!=null&&blueadapter.isDiscovering()){
			deviceList.clear();
			adapter.notifyDataSetChanged();
		}
		if(device.size()>0){	//存在已经配对过的蓝牙设备
			deviceList.clear();
			for(Iterator<BluetoothDevice> it=device.iterator();it.hasNext();){
				//deviceList.clear();
				BluetoothDevice btd=it.next();
				deviceList.add(btd.getName()+"__ip:"+btd.getAddress());
				adapter.notifyDataSetChanged();
				((TextView) findViewById(R.id.tx_title111))
				.setText("请点击设备进行连接");
			}
		}else{	//不存在已经配对过的蓝牙设备
			//deviceList.add("没有已经配对的设备");
			//adapter.notifyDataSetChanged();
			((TextView) findViewById(R.id.tx_title111))
			.setText("没有已经配对的设备");
		}
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		
		switch(resultCode){
		case RESULT_OK:
			findAvalibleDevice();
			break;
		case RESULT_CANCELED:
			break;
		}
		super.onActivityResult(requestCode, resultCode, data);
	}

	private class ClinckMonitor implements OnClickListener{

		@Override
		public void onClick(View v) {
			if(blueadapter.isDiscovering()){
				mTogBtn1.setChecked(false);
			}else{
				deviceList.clear();
				findAvalibleDevice();
				mTogBtn1.setChecked(true);
			}
		}
	}
	/**
	 * 蓝牙搜索状态广播监听
	 * @author Andy
	 *
	 * try {
								setPin(device.getClass(), device, "1234");
								createBond(device.getClass(), device);
								cancelPairingUserInput(device.getClass(), device);
							} catch (Exception e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							} 
							 static public boolean createBond(Class btClass, BluetoothDevice btDevice)  
                throws Exception {  
            Method createBondMethod = btClass.getMethod("createBond");  
            Log.i("life", "createBondMethod = " + createBondMethod.getName());  
            Boolean returnValue = (Boolean) createBondMethod.invoke(btDevice);  
            return returnValue.booleanValue();  
        }  
      
        static public boolean setPin(Class btClass, BluetoothDevice btDevice,  
                String str) throws Exception {  
            Boolean returnValue = null;  
            try {  
                Method removeBondMethod = btClass.getDeclaredMethod("setPin",  
                        new Class[] { byte[].class });  
                returnValue = (Boolean) removeBondMethod.invoke(btDevice,  
                        new Object[] { str.getBytes() });  
                Log.i("life", "returnValue = " + returnValue);  
            } catch (SecurityException e) {  
                // throw new RuntimeException(e.getMessage());  
                e.printStackTrace();  
            } catch (IllegalArgumentException e) {  
                // throw new RuntimeException(e.getMessage());  
                e.printStackTrace();  
            } catch (Exception e) {  
                // TODO Auto-generated catch block  
                e.printStackTrace();  
            }  
            return returnValue;  
        }  
      
        // 取消用户输入  
        static public boolean cancelPairingUserInput(Class btClass,  
                BluetoothDevice device) throws Exception {  
            Method createBondMethod = btClass.getMethod("cancelPairingUserInput");  
            // cancelBondProcess()  
            Boolean returnValue = (Boolean) createBondMethod.invoke(device);  
            Log.i("life", "cancelPairingUserInputreturnValue = " + returnValue);  
            return returnValue.booleanValue();  
        }  	
	 */
	private class DeviceReceiver extends BroadcastReceiver{

		@Override
		public void onReceive(Context context, Intent intent) {
			String action =intent.getAction();
			if(BluetoothDevice.ACTION_FOUND.equals(action)){	//搜索到新设备
				BluetoothDevice btd=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				//搜索没有配过对的蓝牙设备
				 if (btd.getBondState() != BluetoothDevice.BOND_BONDED) {
					for (int i = 1; i <deviceList.size(); i++) 
					{
							if (deviceList.get(i).toString().equals(btd.getName()+"__ip:"+btd.getAddress().toString())) 
							{
								deviceList.remove(i);
							}
						}
					deviceList.add(btd.getName()+"__ip:"+btd.getAddress());
					 adapter.notifyDataSetChanged();
					 ((TextView) findViewById(R.id.tx_title111))
						.setText("点击搜索到的设备进行配对");
				 }
				//deviceList.clear();
				//deviceList.add(btd.getName()+"ip"+btd.getAddress());
				//adapter.notifyDataSetChanged();
			}
			 else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)){	//搜索结束
				 
	                if (deviceListview.getCount() == 0) {
	                	((TextView) findViewById(R.id.tx_title111))
	        			.setText("没有可以匹配的设备，如确定设备存在请手动匹配");
	                }
	                mTogBtn1.setChecked(false);
	            }
		}
			
	}
	/**
	 * 菜单、返回键响应
	 */
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if(keyCode == KeyEvent.KEYCODE_BACK)
        {  
            exitBy2Click();		//调用双击退出函数
        }
		return false;
	}
	/**
	 * 双击退出函数
	 */
	private static Boolean isExit = false;

	private void exitBy2Click() {
		Timer tExit = null;
		if (isExit == false) {
			isExit = true; // 准备退出
			Toast.makeText(this, "再按一次退出程序", Toast.LENGTH_SHORT).show();
			tExit = new Timer();
			tExit.schedule(new TimerTask() {
				@Override
				public void run() {
					isExit = false; // 取消退出
				}
			}, 2000); // 如果2秒钟内没有按下返回键，则启动定时器取消掉刚才执行的任务

		} else {
			ActivityCollector.finishAll();
			finish();
			System.exit(0);
		}
	}
	@Override
	public void onItemClick(AdapterView<?> arg0, View arg1, int pos, long arg3) {
		
		Log.e("msgParent", "Parent= "+arg0);
		Log.e("msgView", "View= "+arg1);
		Log.e("msgChildView", "ChildView= "+arg0.getChildAt(pos-arg0.getFirstVisiblePosition()));
		
			final String msg = deviceList.get(pos);
			
			if(blueadapter!=null&&blueadapter.isDiscovering()){
				mTogBtn1.setChecked(false);
			}
			
			AlertDialog.Builder dialog = new AlertDialog.Builder(this);// 定义一个弹出框对象
			dialog.setTitle("连接设备");
			dialog.setMessage(msg);
			dialog.setPositiveButton("连接",
					new DialogInterface.OnClickListener() {
						

						@Override
						public void onClick(DialogInterface dialog, int which) {
							Bluetooth.BlueToothAddress=msg.substring(msg.length()-17);
							
							if(Bluetooth.lastblueToothAddress!=Bluetooth.BlueToothAddress){
								Bluetooth.lastblueToothAddress=Bluetooth.BlueToothAddress;
							}
							String address = Bluetooth.BlueToothAddress;
							if(!address.equals("null"))
							{
								device = mBluetoothAdapter.getRemoteDevice(address);
							if (device.getBondState() == BluetoothDevice.BOND_NONE) {
								Toast.makeText(mContext, "连接尚未建立成功，请输入匹配信息", Toast.LENGTH_SHORT).show();
					                Method creMethod;
									try {
										creMethod = BluetoothDevice.class    
										        .getMethod("createBond");
										//Toast.makeText(mContext, "连接正在噢", Toast.LENGTH_SHORT).show();
										Bluetooth.isOpen = true;
										try {
											creMethod.invoke(device);
										} catch (IllegalAccessException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										} catch (IllegalArgumentException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										} catch (InvocationTargetException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
									} catch (NoSuchMethodException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}    
					                Log.e("TAG", "开始配对"); 
					                if (device.getBondState() == BluetoothDevice.BOND_BONDED) {
					                Intent in=new Intent(SearchDeviceActivity.this,BluetoothActivity.class);
									startActivity(in);
					                }
					                    
					            } else
								{
					            	Intent in=new Intent(SearchDeviceActivity.this,BluetoothActivity.class);
									startActivity(in);
									//Toast.makeText(mContext, "连接尚未建立成功，请输入匹配信息", Toast.LENGTH_SHORT).show();
					            	Toast.makeText(mContext, "已经匹配", Toast.LENGTH_SHORT).show();
									Bluetooth.isOpen = true;
								}
							}
							
						
						}
					});
			dialog.setNegativeButton("取消",
					new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							Bluetooth.BlueToothAddress = null;
						}
					});
			dialog.show();
	}
	
}
