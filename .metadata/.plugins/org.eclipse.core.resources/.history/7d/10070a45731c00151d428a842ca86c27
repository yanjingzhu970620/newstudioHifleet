package com.hifleet.lnfo.layer;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.Executors;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xmlpull.v1.XmlPullParser;

import com.hifleet.bean.AlertAreaShape;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.RectF;
import android.os.AsyncTask;
import android.os.Build;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.Xml;

import com.hifleet.bean.Center;
import com.hifleet.bean.Line;
import com.hifleet.bean.MetaPolygon;
import com.hifleet.bean.Plot;
import com.hifleet.bean.PlotBean;
import com.hifleet.bean.PlotLable;
import com.hifleet.bean.Point;
import com.hifleet.bean.TraceBean;
import com.hifleet.bean.lableBean;
import com.hifleet.bean.loginSession;
import com.hifleet.map.ITileSource;
import com.hifleet.map.IndexConstants;
import com.hifleet.map.LatLon;
import com.hifleet.map.MapTileAdapter;
import com.hifleet.map.OsmandApplication;
import com.hifleet.map.OsmandMapLayer;
import com.hifleet.map.OsmandMapTileView;
import com.hifleet.map.OsmandSettings;
import com.hifleet.map.QuadRect;
import com.hifleet.map.ResourceManager;
import com.hifleet.map.RotatedTileBox;
import com.hifleet.map.MapTileLayer.IMapRefreshCallback;
import com.hifleet.map.OsmandMapLayer.DrawSettings;
import com.hifleet.bean.Polygon;

/**
 * @{# PlotInfoLayer.java Create on 2015年5月18日 下午2:13:50
 * 
 * @author <a href="mailto:evan0502@qq.com">Evan</a>
 * @version 1.0
 * @description
 * 
 */
public class PlotInfoLayer extends OsmandMapLayer implements
		IMapRefreshCallback {

	OsmandApplication app;

	private QuadRect quadRect;

	protected static final int emptyTileDivisor = 16;
	public static final int OVERZOOM_IN = 0;// 2;

	// List<PlotBean> listp = new ArrayList<PlotBean>();
	// List<PlotBean> msgs = null;

	List<Plot> listp = new ArrayList<Plot>();

	private final boolean mainMap;
	protected ITileSource map = null;
	protected MapTileAdapter mapTileAdapter = null;
	public static List<Map<String, String>> pointList = new ArrayList<Map<String, String>>();
	public static List<Map<String, String>> pointList1 = new ArrayList<Map<String, String>>();
	Paint paintBitmap, locationPaint;

	protected RectF bitmapToDraw = new RectF();

	protected Rect bitmapToZoom = new Rect();

	protected OsmandMapTileView view;
	protected ResourceManager resourceManager;
	private OsmandSettings settings;
	private boolean visible = true;

	private List<PlotBean> _plot = new ArrayList<PlotBean>();
	private List<Plot> plotlist = new ArrayList<Plot>();

	private Paint fill_paint;
	private Paint edge_line_paint;
	private Paint line_paint;

	String Polygon;
	float drawpoint[];
	private List<String> _point = new ArrayList<String>();
	private RotatedTileBox tileBox;

	private Paint paint,paint1;
	DisplayMetrics dm;

	private boolean flag = true;
	private long lastCallAsynTaskTime = 0;
	private double callIntervalLimit1 = 1 * 1000L;
	private int PLOT_SHOW = 8;
	static NumberFormat ddf1 = NumberFormat.getNumberInstance();

	public PlotInfoLayer(boolean mainMap) {
		this.mainMap = mainMap;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.hifleet.map.OsmandMapLayer#initLayer(com.hifleet.map.OsmandMapTileView
	 * )
	 */
	@Override
	public void initLayer(OsmandMapTileView view) {
		// TODO Auto-generated method stub
		this.view = view;
		settings = view.getSettings();
		resourceManager = view.getApplication().getResourceManager();

		// paintBitmap = new Paint();
		// paintBitmap.setFilterBitmap(true);

//		locationPaint = new Paint();
//		locationPaint.setAntiAlias(true);
//		locationPaint.setFilterBitmap(true);
//		locationPaint.setDither(true);

		fill_paint = new Paint();
		fill_paint.setStyle(Style.FILL_AND_STROKE);		
		fill_paint.setAntiAlias(true);
		fill_paint.setColor(view.getResources().getColor(
				com.hifleet.R.color.red));
		fill_paint.setAlpha(50);

		paint = new Paint(); // 设置�?个笔刷大小是3的黄色的画笔
		paint.setColor(Color.WHITE);
		paint.setStrokeJoin(Paint.Join.ROUND);
		paint.setStrokeCap(Paint.Cap.ROUND);
		paint.setStrokeWidth(3);
		
		paint1 = new Paint(); // 设置�?个笔刷大小是3的黄色的画笔
		paint1.setColor(Color.BLACK);
		paint1.setStrokeJoin(Paint.Join.ROUND);
		paint1.setStrokeCap(Paint.Cap.ROUND);
		paint1.setStrokeWidth(3);
		
//		paint = new Paint(); // 设置一个笔刷大小是5的黄色的画笔
//		paint.setColor(Color.YELLOW);
//		paint.setStrokeJoin(Paint.Join.ROUND);
//		paint.setStrokeCap(Paint.Cap.ROUND);
//		paint.setStrokeWidth(5);
		
		edge_line_paint = new Paint();
		edge_line_paint.setColor(view.getResources().getColor(com.hifleet.R.color.red));
		edge_line_paint.setStrokeWidth(1);
		edge_line_paint.setStyle(Style.STROKE);
		edge_line_paint.setAntiAlias(true);
		edge_line_paint.setStrokeJoin(Paint.Join.ROUND);
		edge_line_paint.setStrokeCap(Paint.Cap.ROUND);
		
		line_paint = new Paint();
		line_paint.setColor(view.getResources().getColor(com.hifleet.R.color.black));
		line_paint.setStrokeWidth(3);
		line_paint.setAntiAlias(true);
		line_paint.setStyle(Style.STROKE);
		line_paint.setStrokeJoin(Paint.Join.ROUND);
		line_paint.setStrokeCap(Paint.Cap.ROUND);

		ddf1.setMaximumFractionDigits(3);
		dm = view.getResources().getDisplayMetrics();
	}

	@Override
	public void onDraw(Canvas canvas, RotatedTileBox tileBox,
			DrawSettings settings) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.hifleet.map.OsmandMapLayer#destroyLayer()
	 */
	@Override
	public void destroyLayer() {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.hifleet.map.OsmandMapLayer#drawInScreenPixels()
	 */
	@Override
	public boolean drawInScreenPixels() {
		// TODO Auto-generated method stub
		return false;
	}

	private HashMap<String, LoadingPlotXMLThread> asyntaskmap = new HashMap<String, LoadingPlotXMLThread>();

	private void clearMapByUUID(String uuid) {
		asyntaskmap.remove(uuid);
	}

	private void closeReqest() {
		if (asyntaskmap.isEmpty())
			return;
		Iterator<String> it = asyntaskmap.keySet().iterator();
		while (it.hasNext()) {
			String uuid = it.next();
			LoadingPlotXMLThread task = asyntaskmap.get(uuid);
			task.cancel(true);
		}
	}

	private void callPlotInfoAction(RotatedTileBox viewportToDraw) {
		closeReqest();
		String uuid = UUID.randomUUID().toString();
		LoadingPlotXMLThread task = new LoadingPlotXMLThread(uuid,
				viewportToDraw);
		asyntaskmap.put(uuid, task);
		// System.out.println("" + uuid + " plot启动。");
		execute(task);
	}

	private void execute(LoadingPlotXMLThread task) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			task.executeOnExecutor(Executors.newCachedThreadPool(), new Void[0]);
		} else {
			task.execute(new Void[0]);
		}
	}

	class LoadingPlotXMLThread extends AsyncTask<Void, String, String> {
		String uuid;
		private RotatedTileBox privateTileBox;
		private Canvas privateCanvas;

		public LoadingPlotXMLThread(String uuid, RotatedTileBox box) {
			this.uuid = uuid;
			this.privateTileBox = box;
			// System.out.println("LoadingPlotXMLThread");
		}

		@Override
		protected String doInBackground(Void... arg0) {
			// print("标绘层后台运行。。。");
			try {
				if (this.isCancelled()) {
					// print("线程取消 1.");
					return "";
				}

				String userId = app.myPreferences.getString("User", null);
				QuadRect rect = privateTileBox.getLatLonBounds();

				LatLon p3 = new LatLon(rect.top, rect.right);
				LatLon p2 = new LatLon(rect.top, rect.left);
				LatLon p1 = new LatLon(rect.bottom, rect.left);
				LatLon p4 = new LatLon(rect.bottom, rect.right);

				String polygon = "((" + ddf1.format(p2.getLongitude()) + "%20"
						+ ddf1.format(p2.getLatitude()) + ","
						+ ddf1.format(p1.getLongitude()) + "%20"
						+ ddf1.format(p1.getLatitude()) + ","
						+ ddf1.format(p4.getLongitude()) + "%20"
						+ ddf1.format(p4.getLatitude()) + ","
						+ ddf1.format(p3.getLongitude()) + "%20"
						+ ddf1.format(p3.getLatitude()) + ","
						+ ddf1.format(p2.getLongitude()) + "%20"
						+ ddf1.format(p2.getLatitude()) + "))" + "&Scale="
						+ tileBox.getZoom() + "&" + "UserId=" + userId
						+ "&userDomain=qq.com";

				String bboxurl = app.myPreferences.getString("loginserver",
						null) + IndexConstants.GET_PLOT_URL + polygon;

				print("标绘请求地址： " + bboxurl);
				// System.out.println("biaoURL" + "====" +"执行了plot 请求啦");
				if (this.isCancelled()) {
					// print("线程取消 1.");
					return "";
				}

				URL url = new URL(bboxurl);
				HttpURLConnection conn = (HttpURLConnection) url
						.openConnection();
				try {
					if (loginSession.getSessionid() != null) {
						conn.setRequestProperty("cookie",
								loginSession.getSessionid());
					} else {
						conn.setRequestProperty("cookie",
								app.myPreferences.getString("sessionid", ""));
					}
					conn.setConnectTimeout(10000);

					if (this.isCancelled()) {
						// print("线程取消 1.");
						return "";
					}

					InputStream inStream = conn.getInputStream();

					plotlist.clear();
					parseXMLnew(inStream);

					if (this.isCancelled()) {
						// print("线程取消 1.");
						return "";
					}

					if (plotlist.size() > 0) {
						listp.clear();
						for (int i = 0; i < plotlist.size(); i++) {
							listp.add(plotlist.get(i));
						}
					}

					//print("plot解析完成啦: " + plotlist.size());

					inStream.close();

					if (listp.size() > 0) {
						test(listp, privateCanvas, privateTileBox);
					}

				} catch (java.lang.RuntimeException re) {
					re.printStackTrace();
					// print("java.lang.RuntimeException plotinfo");
				}
			} catch (Exception ex) {
				ex.printStackTrace();
				print("出错啦。。。" + ex.getMessage());
			}
			return null;
		}

		protected void onPostExecute(String result) {
			clearMapByUUID(uuid);
			// print("plot异步刷新");
			view.callPrepareBufferImage("plotInfoLayer", privateTileBox, false);
		}
	}

	public void onPrepareBufferImage(Canvas canvas, RotatedTileBox tileBox,
			DrawSettings drawSettings) {
		this.tileBox = tileBox;
		// System.out.println("执行buffer");
		// new LoadingPlotXMLThread(tileBox, canvas).execute();
		// if(!flag){
		// print("执行plot buffer刷新了");
		if (tileBox.getZoom() < PLOT_SHOW) {
			print("当前比例尺大于9，不显示标绘信息" + tileBox.getZoom());
			return;
		}
		print("刷新标绘层。");
		refreashShipsInfoLayer(canvas, tileBox);

	}

	private List<Plot> parseXMLnew(InputStream inStream) {
		try {
			XPath xpath = XPathFactory.newInstance().newXPath();
			DocumentBuilder builder = DocumentBuilderFactory.newInstance()
					.newDocumentBuilder();
			Document document = builder.parse(inStream);

			NodeList plots = (NodeList) xpath.evaluate("/root/plot", document,
					XPathConstants.NODESET);

			for (int i = 0; i < plots.getLength(); i++) {

				Plot myplot = new Plot();

				Node plot = plots.item(i);

				String plotname = ""
						+ xpath.evaluate("@PlotName", plot,
								XPathConstants.STRING);
				String plottype = ""
						+ xpath.evaluate("@PlotType", plot,
								XPathConstants.STRING);
				String colorType=""+xpath.evaluate("@ColorType", plot,XPathConstants.STRING);
				
				myplot.setColorType(colorType);
				//print("标绘类型： " + plottype);
				myplot.setName(plotname);
				myplot.setType(plottype);

				String center = ""
						+ xpath.evaluate("Center", plot, XPathConstants.STRING);
				String shape = ""
						+ xpath.evaluate("Shape", plot, XPathConstants.STRING);

				myplot.setCenter(center);
				myplot.setShape(shape);
				// System.out.println("Center: "+Center+", Shape: "+Shape);

				NodeList alertareas1 = (NodeList) xpath.evaluate(
						"AlertAreaShapes1/Polygon", plot,
						XPathConstants.NODESET);

				AlertAreaShape alert1 = new AlertAreaShape();
				String[] plygons1 = new String[alertareas1.getLength()];

				for (int j = 0; j < alertareas1.getLength(); j++) {
					Node polygon = alertareas1.item(j);
					plygons1[j] = polygon.getTextContent();
				}
				alert1.setPolygons(plygons1);

				NodeList alertareas2 = (NodeList) xpath.evaluate(
						"AlertAreaShapes2/Polygon", plot,
						XPathConstants.NODESET);

				AlertAreaShape alert2 = new AlertAreaShape();
				String[] plygons2 = new String[alertareas2.getLength()];

				for (int j = 0; j < alertareas2.getLength(); j++) {
					Node polygon = alertareas2.item(j);
					plygons2[j] = polygon.getTextContent();
				}
				alert2.setPolygons(plygons2);

				NodeList alertareas3 = (NodeList) xpath.evaluate(
						"AlertAreaShapes3/Polygon", plot,
						XPathConstants.NODESET);
				AlertAreaShape alert3 = new AlertAreaShape();
				String[] plygons3 = new String[alertareas3.getLength()];
				for (int j = 0; j < alertareas3.getLength(); j++) {
					Node polygon = alertareas3.item(j);
					plygons3[j] = polygon.getTextContent();
				}
				alert3.setPolygons(plygons3);

				AlertAreaShape[] alertshapes = new AlertAreaShape[3];
				alertshapes[0] = alert1;
				alertshapes[1] = alert2;
				alertshapes[2] = alert3;
				myplot.setAlertshapes(alertshapes);

				NodeList intersects = (NodeList) xpath.evaluate(
						"IntersectShapes", plot, XPathConstants.NODESET);

				for (int j = 0; j < intersects.getLength(); j++) {
					Node node = intersects.item(j);
					myplot.setIntesect(node.getTextContent());
				}

				plotlist.add(myplot);

			}
		} catch (Exception ex) {
			ex.printStackTrace();
			print("错误！ " + ex.getMessage());
		}
		return plotlist;
	}
	public static List<Map<String, String>> checkpoint = new ArrayList<Map<String, String>>();
	public static List<lableBean> addedlable = new ArrayList<lableBean>();
	public List<String> xy = new ArrayList<String>();
	public List<PlotLable> plotname = new ArrayList<PlotLable>();
	public List<PlotLable> tempship = new ArrayList<PlotLable>();
	public List<String> point = new ArrayList<String>();
	public void setLable(List<PlotLable> list, RotatedTileBox tilebox) {

		print("plot 准备添加lable"+list.size());
		int ii = 37;

		int jj = 35;

		setCheckPoint(ii, jj);

		addedlable.clear();
		xy.clear();
		tempship.clear();
		tempship.addAll(list);
	try{
		for (int s = 0; s < tempship.size(); s++) {
			// System.out.println("船舶名称"+tempship.get(s).cname);
			int locationx = tilebox
					.getPixXFromLonNoRot(Double.valueOf(tempship.get(s).center.getLon()));
			int locationy = tilebox
					.getPixYFromLatNoRot(Double.valueOf(tempship.get(s).center.getLat()));
			// ship location
			Rect rect = new Rect();
			paint.setTextSize(30);
			paint.getTextBounds(tempship.get(s).name, 0,
					tempship.get(s).name.length(), rect);
			int w = rect.width();
			int h = rect.height();
			// int textWidth = getTextWidth(paint, list.get(s).cname);
			for (int i = 0; i < checkpoint.size(); i++) {
				// System.out.println("选了几个点"+i+"checksize"+checkpoint.size());
				boolean addlable = true;
				int x = Integer.parseInt(checkpoint.get(i).get("x"));
				int y = Integer.parseInt(checkpoint.get(i).get("y"));
				// prepare point
				rect.set(locationx + x - ((w + 4) / 2), locationy + y,
						locationx + x + ((w) / 2), locationy + y + h);
				for(int s1 = 0; s1 < tempship.size(); s1++){
					int locationx1 = tilebox
							.getPixXFromLonNoRot(Double.valueOf(tempship.get(s1).center.getLon()));
					int locationy1 = tilebox
							.getPixYFromLatNoRot(Double.valueOf(tempship.get(s1).center.getLat()));
					if(rect.contains(locationx1, locationy1)){
					addlable = false;
					break;
					}
				}
				for (int q = 0; q < addedlable.size(); q++) {
					int lx = addedlable.get(q).x;
					int ly = addedlable.get(q).y;
					int wt = addedlable.get(q).width;
					int ht = addedlable.get(q).heigth;
					if(w>wt){
						wt=w;
					}
					int __x = Math.abs(locationx + x - ((w + 4) / 2) - lx);
					int __y = Math.abs(locationy + y - ly);
					if ((__x >= wt) || (__y >= h)) {
						continue;
					}
					addlable = false;
					break;
				}
				if (addlable) {
					lableBean l = new lableBean();
					l.x = locationx + x - ((w + 4) / 2);
					l.y = locationy + y;
					l.heigth = h;
					l.width = w;
					l.shipx = locationx;
					l.shipy = locationy;
					l.n = tempship.get(s).name;
					addedlable.add(l);
					break;
				}
			}
			
		}
			}catch ( java.lang.IndexOutOfBoundsException jie){
				System.out.println("IndexOutOfBoundsException timelable");
				return;
			}

	}

	public void drawLable(Canvas canvas, RotatedTileBox tileBox) {

		this.tileBox = tileBox;
		print("执行plotlable 刷新 "+addedlable.size());	
		 for(int q = 0;q<addedlable.size();q++){
			 int lx=addedlable.get(q).x;
			 int ly=addedlable.get(q).y;
			 int wt=addedlable.get(q).width;
			 int ht=addedlable.get(q).heigth;
			 int x=addedlable.get(q).shipx;
			 int y=addedlable.get(q).shipy;
			 String n=addedlable.get(q).n;
			 Rect rect = new Rect(lx,ly,lx+wt,ly+ht);
		 canvas.drawLine(x, y, lx+wt/2, ly+ht/2, paint1);
		 canvas.drawRect(rect, paint);
		 paint1.setTextSize(28);
		 canvas.drawText(n, lx, ly+ht, paint1);
		 }
	}
	public static void clearLable() {
		addedlable.clear();
	}
	private void setCheckPoint(int i, int j) {
		point.add(1 * i + "");
		point.add(-1 * j + "");

		point.add(0 * i + "");
		point.add(-1 * j + "");

		point.add(-1 * i + "");
		point.add(-1 * j + "");

		point.add(-1 * i + "");
		point.add(0 * j + "");

		point.add(-1 * i + "");
		point.add(1 * j + "");

		point.add(0 * i + "");
		point.add(1 * j + "");

		point.add(1 * i + "");
		point.add(1 * j + "");

		point.add(1 * i + "");
		point.add(0 * j + "");

//		point.add(2 * i + "");
//		point.add(-1 * j + "");

//		point.add(1 * i + "");
//		point.add(-2 * j + "");

//		point.add(0 * i + "");
//		point.add(-2 * j + "");

		point.add(1 * i + "");
		point.add(1 * j + "");

//		point.add(-1 * i + "");
//		point.add(-2 * j + "");

//		point.add(-2 * i + "");
//		point.add(0 * j + "");

//		point.add(-2 * i + "");
//		point.add(1 * j + "");

//		point.add(-1 * i + "");
//		point.add(2 * j + "");

//		point.add(0 * i + "");
//		point.add(2 * j + "");

//		point.add(1 * i + "");
//		point.add(2 * j + "");

//		point.add(2 * i + "");
//		point.add(1 * j + "");

//		point.add(2 * i + "");
//		point.add(0 * j + "");

//		point.add(2 * i + "");
//		point.add(-2 * j + "");

//		point.add(-2 * i + "");
//		point.add(-2 * j + "");

//		point.add(-2 * i + "");
//		point.add(2 * j + "");

//		point.add(2 * i + "");
//		point.add(2 * j + "");

		checkpoint.clear();
//		print("check清空"+checkpoint.size());
		for (int mi = 0; mi < point.size(); mi += 2) {
			Map map = new HashMap<String, String>();
			map.put("x", point.get(mi));
			map.put("y", point.get(mi + 1));
			checkpoint.add(map);
		}

		point.clear();
//		print("check完成"+checkpoint.size());
	}
	private void refreashShipsInfoLayer(Canvas canvas, RotatedTileBox tileBox) {
		try {

			
			canvas.save();
			
//			print("linelist: " + lineplotlist.size() + ", pointlist: "
//					+ pointplotlist.size() + ", polylist: "
//					+ polygonplotlist.size());

			// 遍历线标绘
			if (lineplotlist.size() > 0) {
				//print("画线标绘。");
				for (Line line : lineplotlist) {

					Center c = line.getCenter();
					String name  = line.getName();
                    PlotLable p =  new PlotLable();
                    print("画线标绘。"+name);
                    p.center=c;
                    p.name=name;
                    plotname.add(p);
					Path path = new Path();

					List<Map<String, Double>> points = line.getPoints();
					int i = 0;
					double lon, lat;
					int locationx, locationy;
					for (Map<String, Double> map : points) {
						lon = map.get("x");
						lat = map.get("y");
						locationx = tileBox.getPixXFromLonNoRot(lon);
						locationy = tileBox.getPixYFromLatNoRot(lat);
						//print("线坐标： "+locationx+", "+locationy);
						if (i == 0) {
							path.moveTo(locationx, locationy);
							i++;
						} else {
							path.lineTo(locationx, locationy);
						}
					}
					
					canvas.drawPath(path,line_paint);
					
					ArrayList<ArrayList<MetaPolygon>> alertareas=line.getAlertareaes();
					
					for(ArrayList<MetaPolygon> shapes:alertareas){
						//遍历警戒区
						for(MetaPolygon polygon:shapes){
							//遍历警戒区下面的多边形								
								ArrayList<HashMap<String,Double>> polypoints = polygon.getPoints();								
								double polylon,polylat;
								int polyx,polyy;
								Path polypath = new Path();
								int polyi=0;
								
								for(HashMap<String,Double> pointsmap:polypoints){
									polylon = pointsmap.get("x");
									polylat = pointsmap.get("y");
									//print("jingjiequ: "+polylon+", "+polylat);
									polyx = tileBox.getPixXFromLonNoRot(polylon);
									polyy = tileBox.getPixYFromLatNoRot(polylat);
									
									if(polyi==0){
										polyi++;
										polypath .moveTo(polyx, polyy);
									}else{
										polypath.lineTo(polyx, polyy);
									}
								}
								//print("画了一个线标绘的警戒区。");
								canvas.drawPath(polypath, fill_paint);
								canvas.drawPath(polypath, edge_line_paint);
							
						}
					}
					
				}
				
			}

			//遍历点标绘
			if (pointplotlist.size() > 0) {
				for (Point p : pointplotlist) {
					Center c=p.getCenter();
					String name=p.getName();
					
					PlotLable pl = new PlotLable();
					pl.center=c;
                    pl.name=name;
                    plotname.add(pl);
					ArrayList<ArrayList<MetaPolygon>> alertareas=p.getAlertareaes();
					
					//遍历警戒区
					for(ArrayList<MetaPolygon> shapes:alertareas){
						
						//遍历警戒区下面的多边形
						for(MetaPolygon polygons:shapes){		
							
								ArrayList<HashMap<String,Double>> polypoints = polygons.getPoints();								
								double polylon,polylat;
								int polyx,polyy;
								Path polypath = new Path();
								int polyi=0;
								
								for(HashMap<String,Double> pointsmap:polypoints){
									polylon = pointsmap.get("x");
									polylat = pointsmap.get("y");
									
									//print("jingjiequ: "+polylon+", "+polylat);
									
									polyx = tileBox.getPixXFromLonNoRot(polylon);
									polyy = tileBox.getPixYFromLatNoRot(polylat);
									
									if(polyi==0){
										polyi++;
										polypath .moveTo(polyx, polyy);
									}else{
										polypath.lineTo(polyx, polyy);
									}
								}
								//print("画了一个点标绘的警戒区。");
								canvas.drawPath(polypath, fill_paint);
								canvas.drawPath(polypath, edge_line_paint);
							//}	
							
						}
					}
					
				}
			}

			//遍历面标绘
			if (polygonplotlist.size() > 0) {
				// print("面标绘");
				for (Polygon poly : polygonplotlist) {

					Paint polygon_paint = new Paint();
					polygon_paint.setStyle(Style.FILL_AND_STROKE);		
					polygon_paint.setAntiAlias(true);
					
					//根据返回的面标绘的颜色值，绘制面标绘。
					polygon_paint.setColor(Color.parseColor(poly.getColorType()));
					polygon_paint.setAlpha(50);
					
					Path path = new Path();
					int i = 0;
					
					poly.getName();
					poly.getCenter();
					
					List<Map<String, Double>> points = poly.getPoints();

					double lon, lat;
					int locationx, locationy;

					for (Map<String, Double> map : points) {

						lon = map.get("x");
						lat = map.get("y");
						locationx = tileBox.getPixXFromLonNoRot(lon);
						locationy = tileBox.getPixYFromLatNoRot(lat);

						if (i == 0) {
							i++;
							path.moveTo(locationx, locationy);
						} else {
							path.lineTo(locationx, locationy);
						}
					}
					
					canvas.drawPath(path, polygon_paint);
				}
			}
             setLable(plotname,tileBox);
			 drawLable(canvas,tileBox);
			 print("plot lable 画完了");
			// TODO 挂名字标签
			
			canvas.restore();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	List<Plot> list1 = new ArrayList<Plot>();
	List<Line> lineplotlist = new ArrayList<Line>();
	List<Point> pointplotlist = new ArrayList<Point>();
	List<Polygon> polygonplotlist = new ArrayList<Polygon>();

	private boolean isTheSameTileBox;

	public void test(List<Plot> list, Canvas canvas, RotatedTileBox tileBox) {
		// pointList.clear();
		list1.clear();
		lineplotlist.clear();
		pointplotlist.clear();
		polygonplotlist.clear();

		if (list.size() >= 1) {

			for (int i = 0; i < list.size(); i++) {
				list1.add(list.get(i));
			}

			for (int i = 0; i < list1.size(); i++) {

				Plot plot = list1.get(i);
				String plottype = plot.getType();
				//print("plottype: " + plottype);
				String plotname = plot.getName();
				Center center = parseCenter(plot.getCenter());
				ArrayList<ArrayList<MetaPolygon>> alertareaes 
				= parseAlertAreaShapes(plot.getAlertshapes());

				if (plottype.compareTo("Line") == 0) {
					// 线标绘
					// print("线标绘");
					List<Map<String, Double>> points = parseIntersectLine(plot
							.getIntesect());
					Line line = new Line();
					line.setName(plotname);
					
					line.setCenter(center);
					line.setPoints(points);
					line.setAlertareaes(alertareaes);
					lineplotlist.add(line);
					
					continue;
				}

				if (plottype.compareTo("Point") == 0) {
					// 点标绘，没有intersect
					Point point = new Point();
					point.setName(plotname);
					if(center!=null)
					point.setCenter(center);
					point.setAlertareaes(alertareaes);
					pointplotlist.add(point);
					continue;
				}

				if (plottype.compareTo("Polygon") == 0) {
					// 面标绘
					List<Map<String, Double>> points = parseIntersectPolygon(plot
							.getIntesect());
					Polygon polygon = new Polygon();
					polygon.setName(plotname);
					
					polygon.setCenter(center);
					polygon.setPoints(points);
					polygon.setAlertareaes(alertareaes);
					polygon.setColorType(plot.getColorType());
					polygonplotlist.add(polygon);
					continue;
					// 这个形状只会是一个面
				}
			}

		}
	}

	// 解析中心点位置，即标签所在位置
	private Center parseCenter(String center) {
		// POINT (121.024591388889 40.2429875)		
		if(center.compareTo("POINT EMPTY")==0)
			return null;		
		String c = center.replace("POINT", "");
		c = c.trim();
		c = c.replace("(", "");
		c = c.replace(")", "");
		c = c.trim();
		String ss[] = c.split(" ");
		Center ccenter = new Center();

		if (ss[0] != null && ss[1] != null) {

			ccenter.setLon(Double.parseDouble(ss[0]));
			ccenter.setLat(Double.parseDouble(ss[1]));
		}
		return ccenter;
	}

	// 解析裁剪后的面标绘形状
	private List<Map<String, Double>> parseIntersectPolygon(String polygon) {
		// 解析polygon字符串
		String p = polygon.replace("POLYGON", "");
		p = p.trim();
		p = p.replace("((", "");
		p = p.replace("))", "");
		List<Map<String, Double>> points = new ArrayList<Map<String, Double>>();

		if (p.contains("), (")) {
			// TODO 有多个小的polygon
		} else {
			// 没有小polygon
			String pairs[] = p.split(",");
			for (String pair : pairs) {
				pair = pair.trim();
				String lonlat[] = pair.split(" ");
				if (lonlat[0] != null && lonlat[1] != null) {
					double lon = Double.parseDouble(lonlat[0]);
					double lat = Double.parseDouble(lonlat[1]);
					Map<String, Double> lonlatmap = new HashMap<String, Double>();
					lonlatmap.put("x", lon);
					lonlatmap.put("y", lat);
					points.add(lonlatmap);
				}
			}
		}

		return points;
	}

	// 解析裁剪后的线标绘形状
	private List<Map<String, Double>> parseIntersectLine(String line) {
		// print("LinsStrin: "+line);
		// 解析linestring 字符串
		// LINESTRING (116.05388888888889 21.630833333333335, 116.04555555555555
		// 21.64388888888889)

		String linestring = line.replace("LINESTRING", "");
		linestring = linestring.trim();
		linestring = linestring.replace("(", "");
		linestring = linestring.replace(")", "");

		String pairs[] = linestring.split(",");
		List<Map<String, Double>> points = new ArrayList<Map<String, Double>>();
		for (String pair : pairs) {
			pair = pair.trim();
			String lonlat[] = pair.split(" ");
			if (lonlat[0] != null && lonlat[1] != null) {
				double lon = Double.parseDouble(lonlat[0]);
				double lat = Double.parseDouble(lonlat[1]);
				Map<String, Double> lonlatmap = new HashMap<String, Double>();
				lonlatmap.put("x", lon);
				lonlatmap.put("y", lat);
				points.add(lonlatmap);
			}
		}
		return points;
	}

	private ArrayList<ArrayList<MetaPolygon>> parseAlertAreaShapes(AlertAreaShape[] alertareas) {

		ArrayList<ArrayList<MetaPolygon>> alertarea_polygon_list = new ArrayList<ArrayList<MetaPolygon>>();
		
		for (AlertAreaShape alertarea : alertareas) {
			// 可能有多个警戒区（3个）
			//开始遍历每一个alertarea
			//每一个alertarea下有多个polygon
			
			String polygons[] = alertarea.getPolygons();
			ArrayList<MetaPolygon> polygonlist = new ArrayList<MetaPolygon>();
			
			for(String polygon:polygons){
				//可能有多个polygon
				//开始遍历每一个polygon
				MetaPolygon metapolygon = new MetaPolygon();
				
				String p = polygon.replace("POLYGON", "");
				p = p.trim();
				p = p.replace("((", "");
				p = p.replace("))", "");
				
				if (p.contains("), (")) {
					// 有多个小的polygon
				} else {
					
				String pairs[] = p.split(",");
								
				for (String pair : pairs) {
					pair = pair.trim();
					String lonlat[] = pair.split(" ");
					if (lonlat[0] != null && lonlat[1] != null) {
						double lon = Double.parseDouble(lonlat[0]);
						double lat = Double.parseDouble(lonlat[1]);
						HashMap<String, Double> lonlatmap = new HashMap<String, Double>();
						lonlatmap.put("x", lon);
						lonlatmap.put("y", lat);
						metapolygon.addPoint(lonlatmap);
					}
					}
				}
				polygonlist.add(metapolygon);
			}
			alertarea_polygon_list.add(polygonlist);
		}
		return alertarea_polygon_list;
	}

	@Override
	public void mapRefreshed(RotatedTileBox tileBox) {
		// TODO Auto-generated method stub
		long calltime = System.currentTimeMillis();
		flag = false;
		this.tileBox = tileBox;
		
		lineplotlist.clear();
		pointplotlist.clear();
		polygonplotlist.clear();

		print("执行plot move" + tileBox.getZoom());

		if (tileBox.getZoom() >= PLOT_SHOW) {

			if (lastQueryTileBox == null) {
				// print("lastQueryTileBox null isTheSameTileBox=false. ");
				lastQueryTileBox = tileBox;
				isTheSameTileBox = false;

			} else {
				isTheSameTileBox = isTheSameTileBox(tileBox);
				// print("判断结果： " + isTheSameTileBox);
			}

			if (!isTheSameTileBox) {

				lastQueryTileBox = tileBox;

				if ((calltime - lastCallAsynTaskTime) > callIntervalLimit1) {

					if (app.myPreferences.getBoolean("isShowPlot", true)) {

						callPlotInfoAction(tileBox);

					} else {

						pointList.clear();

						// System.out.println("隐藏标绘");
					}
				}
			}

			lastCallAsynTaskTime = calltime;

			return;
		}
	}

	private RotatedTileBox lastQueryTileBox;

	private boolean isTheSameTileBox(RotatedTileBox tileBox) {

		if (tileBox.getZoom() != lastQueryTileBox.getZoom()) {
			return false;
		}

		if (lastQueryTileBox != null) {
			LatLon lastLatLon = lastQueryTileBox.getCenterLatLon();
			LatLon thisLatLon = tileBox.getCenterLatLon();

			if ((lastLatLon.getLatitude() != thisLatLon.getLatitude())
					|| lastLatLon.getLongitude() != thisLatLon.getLongitude()) {
				return false;
			}
			return true;
		}
		return false;
	}
	
	
	private static void print(String msg) {
		Log.i(TAG, msg);
	}

	public static final String TAG = "FileDownloader";

}
