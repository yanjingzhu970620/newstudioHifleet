package com.example.link;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

import ais.parser.Test;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

public class BluetoothActivity extends  Activity{
	
	/* 一些常量，代表服务器的名称 */
	public static final String PROTOCOL_SCHEME_RFCOMM = "btspp";
	private static ListView mListView;
	//private Button sendButton;
	private Button disconnectButton;
	private boolean flag=true;
	static AnimationTabHost mmTabHost;
	//private EditText editMsgView;
	//private ArrayAdapter<String> mAdapter;
	static SimpleAdapter madapter = null;
	private static List<String> msgList=new ArrayList<String>();
	Context mContext;
	
	private BluetoothServerSocket mserverSocket = null;
	//private ServerThread startServerThread = null;
	private clientThread clientConnectThread = null;
	private BluetoothSocket socket = null;
	private BluetoothDevice device = null;
	private readThread mreadThread = null;;	
	 InputStream mmInStream = null;
	private BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
	private Button sendButton;
	private static Timer timer = null;  
    private static TimerTask task = null; 
	private static ArrayList<Map<String, String>> adapterList2=null;
	public static String Msg1;
		@Override
	    public void onCreate(Bundle savedInstanceState) {
	        super.onCreate(savedInstanceState); 
	        setContentView(R.layout.chat);
	        mContext = this;
	        mListView = (ListView) super.findViewById(R.id.list);
	        init();
	    }
	
		private void init() {		   
			adapterList2 = new ArrayList<Map<String, String>>();
			madapter = new SimpleAdapter(this, adapterList2, R.layout.online_main,
					new String[] { "time", "body" }, new int[] { R.id.time,
							R.id.body });
			//mListView.setAdapter(madapter);
			mListView.setAdapter(madapter);
			//mListView.setFastScrollEnabled(true);
			//editMsgView= (EditText)findViewById(R.id.MessageText);	
			//editMsgView.clearFocus();
			
			/*<Button android:id="@+id/btn_msg_send"
			android:layout_width="65dp" 
			android:layout_height="wrap_content"  
			android:layout_alignParentRight ="true"
			android:text="发送"/> 	
		     <EditText
	         android:layout_width="fill_parent"
	      	 android:layout_height = "wrap_content"
	      	 android:layout_toLeftOf="@id/btn_msg_send"
	      	 android:layout_toRightOf="@+id/btn_disconnect"  	      	 
	      	 android:hint = "说点什么呢?"
	      	 android:textSize="15dip"
	      	 android:id = "@+id/MessageText"/>*/
			 sendButton= (Button)findViewById(R.id.btn_blueback);
			sendButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View arg0) {
				
					if(adapterList2.size()>1){
						MainActivity.saveList(adapterList2);
						adapterList2.clear();
						}
					 Intent in=new Intent(BluetoothActivity.this,Bluetooth.class);
					 Bluetooth.mTabHost.setCurrentTab(1);
						startActivity(in);
					
				//  BluetoothActivity.this.finish();
				  
				}
			});
			
			/*disconnectButton= (Button)findViewById(R.id.btn_disconnect);
			disconnectButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View arg0) {
					// TODO Auto-generated method stub
					  if(adapterList2.size()>1){
							MainActivity.saveList(adapterList2);
							}
			        if (Bluetooth.serviceOrCilent == Bluetooth.ServerOrCilent.CILENT) 
					{
			        	shutdownClient();
					}
					/*else if (Bluetooth.serviceOrCilent == Bluetooth.ServerOrCilent.SERVICE) 
					{
						shutdownServer();
					}/
					Bluetooth.isOpen = false;
					Bluetooth.serviceOrCilent=Bluetooth.ServerOrCilent.NONE;
					Toast.makeText(mContext, "已断开连接！", Toast.LENGTH_SHORT).show();
					BluetoothActivity.this.finish();
				}
			});	*/	
		}    

	    private static Handler LinkDetectedHandler = new Handler() {
	        @Override
	        public void handleMessage(Message msg) {
				switch (msg.what) {
				case TcpClient.FLUSH:
					Log.v("mes","刷新");
					Calendar cal = Calendar.getInstance();
					int second = cal.get(Calendar.SECOND);// 秒
					int minute = cal.get(Calendar.MINUTE);
					if (adapterList2.size()>1&&second == 00) {
						// Log.v("mes",second+"");
						MainActivity.saveList(adapterList2);
						
						adapterList2.clear();
						// for(int i=1;i<adapterList.size();i++){
						// adapterList.remove(i);
						// }
						// Log.v("mes",second+"要存了哦");
					}

					madapter.notifyDataSetChanged();
					break;
				case TcpClient.ADD:
					msgList.add((String) msg.obj);
					Log.v("mes",msgList.size()+"表长");
					break;
				case TcpClient.ADAPTER:
					 if(msgList.size()>=1){
						 Map map2 = new HashMap<String, String>();
						 Calendar cal1 = Calendar.getInstance();
						
						 map2.put("time", cal1.get(Calendar.YEAR)+"-"
									+ (cal1.get(Calendar.MONTH)+1)+"-" + cal1.get(Calendar.DATE)+"-" +cal1.get(Calendar.HOUR_OF_DAY)+"-"+cal1.get(Calendar.MINUTE)+"-"+
											cal1.get(Calendar.SECOND));
						 map2.put("body", "");
						 adapterList2.add(map2);
					 Map map1 = new HashMap<String, String>();
					for(int i=0;i<msgList.size();i++){
						map1.put("time","");
						map1.put("body", msgList.get(i));
						adapterList2.add(map1);
					}
					msgList.clear(); 
					Tipblue(TcpClient.FLUSH, null);
					 }
					Log.v("mes",adapterList2.size()+"蓝牙适配");
				}
			
	        	/*else
	        	{
	        		msgList.add((String)msg.obj);
	        	}*/
				mListView.setSelection(adapterList2.size() - 1);
	        }
	    };    
	    public synchronized void onPause() {
	        super.onPause();
	    }
	    public static void Tipblue(int cmd, Object str) {
			Message m = new Message();
			m.what = cmd;
			m.obj = str;
			BluetoothActivity.LinkDetectedHandler.sendMessage(m);
		}
	@Override
	protected void onResume() {
		super.onResume();
		Bluetooth.serviceOrCilent=Bluetooth.ServerOrCilent.CILENT;
		
	        if(Bluetooth.serviceOrCilent==Bluetooth.ServerOrCilent.CILENT)
	        {String address = Bluetooth.BlueToothAddress;
			if(!address.equals("null"))
			{
				device = mBluetoothAdapter.getRemoteDevice(address);
				//if (device.getBondState() == BluetoothDevice.BOND_NONE) {
				/*if (device.getBondState() == BluetoothDevice.BOND_NONE) {
					Toast.makeText(mContext, "连接尚未建立成功，请输入匹配信息", Toast.LENGTH_SHORT).show();
		                Method creMethod;
						try {
							creMethod = BluetoothDevice.class    
							        .getMethod("createBond");
							Toast.makeText(mContext, "连接正在噢", Toast.LENGTH_SHORT).show();
							Bluetooth.isOpen = true;
							try {
								creMethod.invoke(device);
							} catch (IllegalAccessException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							} catch (IllegalArgumentException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							} catch (InvocationTargetException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						} catch (NoSuchMethodException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}    
		                Log.e("TAG", "开始配对");    
		                    
		            } else
					{
						//Toast.makeText(mContext, "连接尚未建立成功，请输入匹配信息", Toast.LENGTH_SHORT).show();
		            	Toast.makeText(mContext, "连接竟然建立了", Toast.LENGTH_SHORT).show();
						Bluetooth.isOpen = true;
					}*/
				if(socket==null){
					clientConnectThread = new clientThread();
					if(timer==null){
						timer= new Timer(true);}
						if(task==null){
						task = new TimerTask(){
							public void run() {
								Tipblue(TcpClient.ADAPTER, null);
							}
							};
						timer.schedule(task,0, 1000);
						}
					clientConnectThread.start();
					Bluetooth.isOpen = true;
				}
					}
				
				else
				{
					Toast.makeText(mContext, "地址为空", Toast.LENGTH_SHORT).show();
				}
	      } 
	        if(Bluetooth.isOpen)
	        {
	        	Toast.makeText(mContext, "连接已经打开，可以通信。", Toast.LENGTH_SHORT).show();
	        	return;
	        }
	       /* else if(Bluetooth.serviceOrCilent==Bluetooth.ServerOrCilent.SERVICE)
	        {        	      	
	        	startServerThread = new ServerThread();
	        	startServerThread.start();
	        	Bluetooth.isOpen = true;
	        }*/
	}

	//开启客户端
		private class clientThread extends Thread { 		
			@Override
			public void run() {
				try {
					//创建一个Socket连接：只需要服务器在注册时的UUID号
					// socket = device.createRfcommSocketToServiceRecord(BluetoothProtocols.OBEX_OBJECT_PUSH_PROTOCOL_UUID);
					socket = device.createRfcommSocketToServiceRecord(UUID.fromString("00001101-0000-1000-8000-00805F9B34FB"));
					/*BluetoothSocket temp = null;
					try {
					// temp =
					// mTouchObject.bluetoothDevice.createRfcommSocketToServiceRecord(UUID.fromString(CONNECT_UUID));
					// 以上取得socket方法不能正常使用， 用以下方法代替
					Method m = device.getClass().getMethod("createRfcommSocket",
					new Class[] { int.class });
					temp = (BluetoothSocket) m.invoke(device, 1);
					// 怪异错误： 直接赋值给socket,对socket操作可能出现异常， 要通过中间变量temp赋值给socket
					} catch (SecurityException e) {
					e.printStackTrace();
					} catch (NoSuchMethodException e) {
					e.printStackTrace();
					} catch (IllegalArgumentException e) {
					e.printStackTrace();
					} catch (IllegalAccessException e) {
					e.printStackTrace();
					} catch (InvocationTargetException e) {
					e.printStackTrace();
					}
					socket = temp;*/
					
					//连接
					/*Message msg2 = new Message();
					msg2.obj = "请稍候，正在连接服务器:"+Bluetooth.BlueToothAddress;
					msg2.what = 0;
					LinkDetectedHandler.sendMessage(msg2);*/
					//Tipblue( TcpClient.ADD,"提示信息：请稍候，正在连接服务器:"+Bluetooth.BlueToothAddress);
					socket.connect();
					//启动接受数据
					//flag=true;
					mreadThread = new readThread();
					
					mreadThread.start();
				} 
				catch (IOException e) 
				{
					Log.e("connect", "", e);
					Message msg = new Message();
					msg.obj = "连接服务端异常！断开连接重新试一试。";
					msg.what = 0;
					LinkDetectedHandler.sendMessage(msg);
				} 
			}
		};

		//开启服务器
		/*private class ServerThread extends Thread { 
			@Override
			public void run() {
						
				try {
					/* 创建一个蓝牙服务器 
					 * 参数分别：服务器名称、UUID	 *	
					mserverSocket = mBluetoothAdapter.listenUsingRfcommWithServiceRecord(PROTOCOL_SCHEME_RFCOMM,
							UUID.fromString("00001101-0000-1000-8000-00805F9B34FB"));		
					
					Log.d("server", "wait cilent connect...");
					
					Message msg = new Message();
					msg.obj = "请稍候，正在等待客户端的连接...";
					msg.what = 0;
					LinkDetectedHandler.sendMessage(msg);
					
					/* 接受客户端的连接请求 *
					socket = mserverSocket.accept();
					Log.d("server", "accept success !");
					
					Message msg2 = new Message();
					String info = "客户端已经连接上！可以发送信息。";
					msg2.obj = info;
					msg.what = 0;
					LinkDetectedHandler.sendMessage(msg2);
					//启动接受数据
					mreadThread = new readThread();
					mreadThread.start();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		};*/
		/* 停止服务器 */
		/*private void shutdownServer() {
			new Thread() {
				@Override
				public void run() {
					if(startServerThread != null)
					{
						startServerThread.interrupt();
						startServerThread = null;
					}
					if(mreadThread != null)
					{
						mreadThread.interrupt();
						mreadThread = null;
					}				
					try {					
						if(socket != null)
						{
							socket.close();
							socket = null;
						}
						if (mserverSocket != null)
						{
							mserverSocket.close();/* 关闭服务器 *
							mserverSocket = null;
						}
					} catch (IOException e) {
						Log.e("server", "mserverSocket.close()", e);
					}
				};
			}.start();
		}*/
		/* 停止客户端连接 */
		private void shutdownClient() {
			new Thread() {
				@Override
				public void run() {
					if(clientConnectThread!=null)
					{
						
						clientConnectThread.interrupt();
						clientConnectThread= null;
					}
					if(mreadThread != null)
					{
						//Log.v("mmInStream","试试shutdownClient错哪了");
						//flag=false;
						mreadThread.interrupt();
						mreadThread = null;
					}
					if (socket != null) {
						try {
							Log.v("mmInStream","试试shutdownClient错哪了");
							socket.close();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						socket = null;
					}
				};
			}.start();
		}
	  
		//发送数据
		/*private void sendMessageHandle(String msg) 
		{		
			if (socket == null) 
			{
				Toast.makeText(mContext, "没有连接", Toast.LENGTH_SHORT).show();
				return;
			}
			try {				
				OutputStream os = socket.getOutputStream(); 
				os.write(msg.getBytes());
			} catch (IOException e) {
				e.printStackTrace();
			}			
			msgList.add(msg);
			mAdapter.notifyDataSetChanged();
			mListView.setSelection(msgList.size() - 1);
		}*/
		//读取数据
	    private class readThread extends Thread { 

			@Override
			public void run() {
	        	
	            byte[] buffer = new byte[1024];
	            int bytes;
	            //InputStream mmInStream = null;
	            try {
					if(socket.getInputStream()!=null){
						mmInStream = socket.getInputStream();
					while (flag) {
					    try {
					        // Read from the InputStream
					        if( (bytes = mmInStream.read(buffer)) > 0 )//??????java.io.IOException: Operation Canceled
					        {
					            byte[] buf_data = new byte[bytes];
						    	for(int i=0; i<bytes; i++)
						    	{
						    		buf_data[i] = buffer[i];
						    	}
								String s= new String(buf_data);
								//Test test=new Test(s);
								//Tipblue(TcpClient.ADD,Msg1);
								Tipblue(TcpClient.ADD,s);
					        }
					    } catch (IOException e) {
					    	/*try {
								mmInStream.close();
							} catch (IOException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}*/
					        break;
					    }
					}
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	        }
	    }
		
	    @Override
	    protected void onDestroy() {
	        super.onDestroy();
	        if(adapterList2.size()>1){
				MainActivity.saveList(adapterList2);
				adapterList2.clear();
				}
	        
	        if (Bluetooth.serviceOrCilent == Bluetooth.ServerOrCilent.CILENT) 
			{
	        	/* try {
	 	        	if (mmInStream != null) {
	 	        		//Log.v("mmInStream",mmInStream+"真的不是空");
	 	        		Log.v("mmInStream","到底mmInStream问题");
	 	        	mmInStream.close();
	 	        	 //Log.v("mmInStream","到底是什么问题");
	 	        	}
	 	        	} catch (IOException e1) {
	 	        	e1.printStackTrace();
	 	        	}*/
	        	
	        	 //shutdownClient();
	        	// Log.v("mmInStream","shutdownClient错了");
	 	        	if (mBluetoothAdapter != null && mBluetoothAdapter.isDiscovering()) {
	 	        	mBluetoothAdapter.cancelDiscovery();
	 	        	 //Log.v("mmInStream","mBluetoothAdapter错了吗");
	 	        	}
	        	//shutdownClient();
	        	if (socket != null) {
	        		try {

	        		socket.close();// 结束socket
	        		} catch (IOException e) {
	        		// TODO Auto-generated catch block
	        		e.printStackTrace();
	        		}
	        		socket = null;
	        		}
			}
			/*else if (Bluetooth.serviceOrCilent == Bluetooth.ServerOrCilent.SERVICE) 
			{
				shutdownServer();
			}*/
	        Bluetooth.isOpen = false;
			Bluetooth.serviceOrCilent = Bluetooth.ServerOrCilent.NONE;
	    }

	    
}
