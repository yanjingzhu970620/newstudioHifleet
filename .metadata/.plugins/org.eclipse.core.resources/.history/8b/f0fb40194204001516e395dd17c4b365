package com.hifleet.lnfo.layer;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xmlpull.v1.XmlPullParser;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.RectF;
import android.os.AsyncTask;
import android.util.Log;
import android.util.Xml;

import com.hifleet.activity.LoginActivity;
import com.hifleet.bean.LoginBean;
import com.hifleet.bean.ShipsBean;
import com.hifleet.bean.TraceBean;
import com.hifleet.bean.TraceBean;
import com.hifleet.bean.loginSession;
import com.hifleet.map.ITileSource;
import com.hifleet.map.IndexConstants;
import com.hifleet.map.LatLon;
import com.hifleet.map.MapTileAdapter;
import com.hifleet.map.OsmandApplication;
import com.hifleet.map.OsmandMapLayer;
import com.hifleet.map.OsmandMapTileView;
import com.hifleet.map.OsmandSettings;
import com.hifleet.map.QuadRect;
import com.hifleet.map.ResourceManager;
import com.hifleet.map.RotatedTileBox;
import com.hifleet.utility.Cell;
import com.hifleet.utility.XmlParseUtility;

/**
 * @{# PlotInfoLayer.java Create on 2015年5月18日 下午2:13:50
 * 
 * @author <a href="mailto:evan0502@qq.com">Evan</a>
 * @version 1.0
 * @description
 *
 */
public class TraceInfoLayer extends OsmandMapLayer {

	OsmandApplication app;

	private QuadRect quadRect;

	protected static final int emptyTileDivisor = 16;
	public static final int OVERZOOM_IN = 0;// 2;

	public static final int START_SHOW = 10;
	List<TraceBean> listp = new ArrayList<TraceBean>();

	List<TraceBean> msgs = null;
	private final boolean mainMap;
	protected ITileSource map = null;
	protected MapTileAdapter mapTileAdapter = null;
	List<TraceBean> list1 = new ArrayList<TraceBean>();
	public static List<Map<String, String>> pointList = new ArrayList<Map<String, String>>();
	public static List<Map<String, String>> pointList1 = new ArrayList<Map<String, String>>();
	Paint paintBitmap, locationPaint;

	protected RectF bitmapToDraw = new RectF();

	protected Rect bitmapToZoom = new Rect();

	protected OsmandMapTileView view;
	protected ResourceManager resourceManager;
	private OsmandSettings settings;
	private boolean visible = true;

	private List<TraceBean> _plot = new ArrayList<TraceBean>();

	private Paint paint_mid_point;

	String Polygon;
	float drawpoint[];
	private List<String> _point = new ArrayList<String>();
	private RotatedTileBox tileBox;

	private Paint paint;

	private boolean flag = true;

	public TraceInfoLayer(boolean mainMap) {
		this.mainMap = mainMap;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.hifleet.map.OsmandMapLayer#initLayer(com.hifleet.map.OsmandMapTileView
	 * )
	 */
	@Override
	public void initLayer(OsmandMapTileView view) {
		// TODO Auto-generated method stub
		this.view = view;
		settings = view.getSettings();
		resourceManager = view.getApplication().getResourceManager();

		// paintBitmap = new Paint();
		// paintBitmap.setFilterBitmap(true);

		locationPaint = new Paint();
		locationPaint.setAntiAlias(true);
		locationPaint.setFilterBitmap(true);
		locationPaint.setDither(true);

		paint_mid_point = new Paint();
		paint_mid_point.setStyle(Style.STROKE);
		paint_mid_point.setAntiAlias(true);
		paint_mid_point.setColor(view.getResources().getColor(
				com.hifleet.R.color.red));

		paint_mid_point.setStrokeWidth(5);
		paint_mid_point.setAlpha(127);
		paint = new Paint(); // 设置一个笔刷大小是3的黄色的画笔
		paint.setColor(Color.YELLOW);
		paint.setStrokeJoin(Paint.Join.ROUND);
		paint.setStrokeCap(Paint.Cap.ROUND);
		paint.setStrokeWidth(3);

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.hifleet.map.OsmandMapLayer#onDraw(android.graphics.Canvas,
	 * com.hifleet.map.RotatedTileBox,
	 * com.hifleet.map.OsmandMapLayer.DrawSettings)
	 */
	public void onMapMoveEndDraw(Canvas canvas, RotatedTileBox viewportToDraw) {
		/*flag=false;
		this.tileBox = viewportToDraw;
		//System.out.println("执行move");
		if (app.myPreferences.getBoolean("isShowPlot", true)) {
			new LoadingPlotXMLThread(viewportToDraw, canvas).execute();
			//System.out.println("显示标绘");
		} else {
			pointList.clear();
			//System.out.println("隐藏标绘");
		}*/
	}

	@Override
	public void onDraw(Canvas canvas, RotatedTileBox tileBox,
			DrawSettings settings) {
		// TODO Auto-generated method stub
		// System.out.println("执行onDraw   我是plot");
		if (flag) {
			//if (app.myPreferences.getBoolean("isShowPlot", true)) {
				new LoadingPlotXMLThread(tileBox, canvas).execute();
				//System.out.println("显示标绘");
			//} else {
				//pointList.clear();
				//System.out.println("隐藏标绘");
			//}
			 refreashShipsInfoLayer(canvas, tileBox);

			 flag=false;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.hifleet.map.OsmandMapLayer#destroyLayer()
	 */
	@Override
	public void destroyLayer() {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.hifleet.map.OsmandMapLayer#drawInScreenPixels()
	 */
	@Override
	public boolean drawInScreenPixels() {
		// TODO Auto-generated method stub
		return false;
	}

	class LoadingPlotXMLThread extends AsyncTask<Void, String, String> {
		private RotatedTileBox privateTileBox;
		private Canvas privateCanvas;

		public LoadingPlotXMLThread(RotatedTileBox box, Canvas canvas) {
			this.privateTileBox = box;
			this.privateCanvas = canvas;
			// System.out.println("LoadingPlotXMLThread");
		}

		@Override
		protected String doInBackground(Void... arg0) {
			// print("后台运行。。。");
			try {
				QuadRect rect = privateTileBox.getLatLonBounds();
				LatLon p3 = new LatLon(rect.top, rect.right);
				LatLon p2 = new LatLon(rect.top, rect.left);
				LatLon p1 = new LatLon(rect.bottom, rect.left);
				LatLon p4 = new LatLon(rect.bottom, rect.right);
				String polygon = "((" + p2.getLongitude() + "%20"
						+ p2.getLatitude() + "," + p1.getLongitude() + "%20"
						+ p1.getLatitude() + "," + p4.getLongitude() + "%20"
						+ p4.getLatitude() + "," + p3.getLongitude() + "%20"
						+ p3.getLatitude() + "," + p2.getLongitude() + "%20"
						+ p2.getLatitude() + "))"
						+ "&Scale=8&UserId=admin&userDomain=qq.com";
				String bboxurl = IndexConstants.GET_PLOT_URL + polygon;

				System.out.println("biaoURL" + "====" + bboxurl);
				String bboxurlq="http://58.40.126.151:8080/cnooc/NewMobileGetVesselTrajectoryData.do?bbox=Polygon((121.868%2031.862,121.868%2030.846,122.539%2030.846,122.539%2031.862,121.868%2031.862))&mmsi=477990003&startdate=2015-05-18-00-00-00&endate=2015-05-23-23-59-00&zoom=9";
				URL url = new URL(bboxurlq);
				HttpURLConnection conn = (HttpURLConnection) url
						.openConnection();
				if (loginSession.getSessionid() != null) {
					conn.setRequestProperty("cookie", loginSession.getSessionid());
				}else{
					
					conn.setRequestProperty("cookie",app.myPreferences.getString("sessionid", ""));
				}
				conn.setConnectTimeout(5000);
				InputStream inStream = conn.getInputStream();
				parseXMLnew(inStream);
				if (msgs.size() > 0) {
					listp.clear();
					for (int i = 0; i < msgs.size(); i++) {
						listp.add(msgs.get(i));
					}
				}
				System.out.println("轨迹解析完成啦");
				inStream.close();
			} catch (Exception ex) {
				ex.printStackTrace();
				System.out.println("轨迹出错啦。。。");
			}
			return null;
		}

		protected void onPostExecute(String result) {
			if (listp.size() > 0) {
				test(listp, privateCanvas, privateTileBox);
			}
		}
	}

	public void onPrepareBufferImage(Canvas canvas, RotatedTileBox tileBox,
			DrawSettings drawSettings) {
		this.tileBox = tileBox;
		//System.out.println("执行buffer");
		// new LoadingPlotXMLThread(tileBox, canvas).execute();
		// if(!flag){
		// System.out.println("执行buffer刷新了");
		refreashShipsInfoLayer(canvas, tileBox);
		// }

	}

	/*private List<TraceBean> parseXMLnew(InputStream inStream) throws Exception {
		XmlPullParser parser = Xml.newPullParser();
		TraceBean msg = null;
		if (inStream != null && !inStream.equals(null)) {
			try {
				parser.setInput(inStream, "utf-8");

				int type = parser.getEventType();
				while (type != XmlPullParser.END_DOCUMENT) {
					switch (type) {
					case XmlPullParser.START_DOCUMENT:
						msgs = new ArrayList<TraceBean>();
						break;
					case XmlPullParser.START_TAG:
						if ("ships".equals(parser.getName())) {
							 Log.v("ships", "轨迹解析执行了吗");
							msg = new TraceBean();
						} else {
							if ("ship".equals(parser.getName())) {
								Log.v("ship fle", "轨迹解析执行了吗");

								String lo = parser.getAttributeValue(null,
										"lo");
								String la = parser.getAttributeValue(null,
										"la");
								msg.setLa(la);
								msg.setLo(lo);
								Log.v("ship fle", la+"轨迹解析执行了吗"+lo);
								msgs.add(msg);
								msg = null;
							}
						}
						break;
					case XmlPullParser.END_TAG:
						try {
							if ("ships".equals(parser.getName())
									&& (msg != null)) {
								// Log.v("mes",
								// "msg==="+msg.getPlotId()+msg.getPlotName()+msg.getShape()+msg.getPolygon());
							
								Log.v("mes", "存了" + msgs.size());
							}
						} catch (NullPointerException exxx) {
							Log.v("错啦msg+", msg.toString());
							Log.v("错啦name+", parser.getName());
						}
						// else{
						// Log.v("nameaaaa", parser.getName()+"msggggg"+msg);
						// }
						break;

					}
					type = parser.next();
					// Log.v("mes", "解析成功");
				}
				Log.v("mes", msgs.size() + "轨迹最终长度");
				// for(int i=0;i<msgs.size();i++){
				// Log.v("mes"+i+"=", msgs.get(i).Polygon);
				// }
				return msgs;

			} catch (Exception e) {
				e.printStackTrace();
				Log.v("mes", "解析失败");
			}
		}
		// System.out.println("plot===" +_plot);
		// for (TraceBean p : _plot) {
		// //System.out.println("plotname===" + p.getPlotName());
		// }
		return null;
	}*/
	private void parseXMLnew(InputStream inStream) throws Exception {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		Document document = builder.parse(inStream);
		Element root = document.getDocumentElement();
		NodeList childNodes = root.getChildNodes();

		msgs = new ArrayList<TraceBean>();
		msgs.clear();
		// print("解析时ships"+_ships.size());

		// 判断是否超时
		if (root.getNodeName().compareTo("session_timeout") == 0) {
			// _ships.add(XmlParseUtility.parse(root, ShipsBean.class));
			// for (ShipsBean bean : _ships) {
			// System.out.println("超时了message=" + bean.message + "flag="
			// + bean.flag);
			// }
			return;
		}

		// TODO 更新缓存部分
		// 船舶数据解析并加入_ships
		for (int j = 0; j < childNodes.getLength(); j++) {
			Node childNode = (Node) childNodes.item(j);
			if (childNode.getNodeType() == Node.ELEMENT_NODE) {
				Element childElement = (Element) childNode;
				if (childElement.getNodeName().compareTo("ship") == 0) {
					msgs.add(XmlParseUtility.parse(childElement,
							TraceBean.class));
				}
			}
		}
		System.out.println("fjijfoinfgioq3goigq" + msgs.size());

		
	}

	private void refreashShipsInfoLayer(Canvas canvas, RotatedTileBox tileBox) {
		try {
			Path path = new Path();
			// paint = new Paint(); //设置一个笔刷大小是3的黄色的画笔
			// paint.setColor(Color.YELLOW);
			// paint.setStrokeJoin(Paint.Join.ROUND);
			// paint.setStrokeCap(Paint.Cap.ROUND);
			// paint.setStrokeWidth(3);
			// System.out.println("pointList"+pointList.size());
			// if(!pointList.isEmpty()){
			for (int i = 0; i < list1.size(); i++) {
				if (i >= 0) {
					System.out.println("point"+list1.size());
					// System.out.println("pointList"+pointList.size());
					float xx = Float.parseFloat(list1.get(i).getLo());
					float yy = Float.parseFloat(list1.get(i).getLa());
					int locationX = tileBox.getPixXFromLonNoRot(xx);
					int locationY = tileBox.getPixYFromLatNoRot(yy);
					 //float xx1 =
					// Float.parseFloat(list1.get(i-1).getLo());
					// float yy1 =Float.parseFloat(list1.get(i-1).getLa());
					 //int locationX1 = tileBox.getPixXFromLonNoRot(xx1);
					// int locationY1 = tileBox.getPixYFromLatNoRot(yy1);
				    // canvas.drawLine(locationX1, locationY1, locationX, locationY, paint_mid_point);
					if(i==0){
				     path.moveTo(locationX, locationY);
					}else{
						path.lineTo(locationX, locationY);
						if(i==list1.size()-1){
							canvas.drawPath(path, paint_mid_point);
						}
					}
					//canvas.drawLine(0, 0, i*10, i*10, paint_mid_point);
					 //canvas.drawPoint(locationX1, locationY1, paint_mid_point);
					//System.out.print("xx1"+locationX+"yy1"+locationY);
				}
			}
			// canvas.save();
			// canvas.restore();
			// Path path1 = new Path(); //定义一条路径
			// path1.moveTo(100, 100); //移动到 坐标10,10
			// path1.lineTo(500, 60);
			// path1.lineTo(1000,80);
			// path1.lineTo(10, 10);

			// canvas.drawPath(path1, paint);

			// }
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}



	public void test(List<TraceBean> list, Canvas canvas, RotatedTileBox tileBox) {
		if (list.size() >= 1) {
			list1.clear();
			System.out.println("轨迹listsize" + list.size());
			for (int i = 0; i < list.size(); i++) {
				// Log.v("mes"+i+"=", list.get(i).Polygon);
				list1.add(list.get(i));
			}
			System.out.println("test轨迹刷新");
			view.callPrepareBufferImage();
		}
	}

}
