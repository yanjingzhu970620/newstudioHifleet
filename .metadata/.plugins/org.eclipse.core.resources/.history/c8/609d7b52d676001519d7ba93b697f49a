package com.hifleet.layers;

import java.util.ArrayList;
import java.util.List;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.PointF;
import android.util.DisplayMetrics;

import com.hifleet.activities.MapActivity_Navigation;
import com.hifleet.activities.TextInfoWidget;
import com.hifleet.app.OsmandApplication;
import com.hifleet.base.OsmAndFormatter;
import com.hifleet.data.LatLon;
import com.hifleet.data.RotatedTileBox;
import com.hifleet.helper.GPXUtilities.WptPt;
import com.hifleet.util.MapUtils;
import com.hifleet.view.AnimateDraggingMapThread_Navigation;
import com.hifleet.view.OsmandMapTileView_Navigation;
import com.hifleet.waypoints.RecommendRoutePoints;
import com.hifleetand.plus.R;

public class routeLayer extends OsmandMapLayer_Navigation implements
		ContextMenuLayer.IContextMenuProvider {

	private OsmandMapTileView_Navigation view;
	private int distanceMeasurementMode = 0;
	private Bitmap originIcon;
	private Bitmap destinationIcon;
	private Paint bitmapPaint;
	private RotatedTileBox tilebox;
	private Path path;

	private Paint paint;
	private Paint paint2;
	private Paint paint_start_point;
	private Paint paint_mid_point;
	private Paint paint_end_point;
	private Paint paintText;
	float currentDistance;
	OsmandApplication app;
	private TextInfoWidget distanceControl;
	private static final int DistanceMeasurementMode_START = 108;
	private static final int DistanceMeasurementMode_INTERVAL = 109;
	private static final int DistanceMeasurementMode_END = 110;
	private static final int DistanceMeasurementMode_CLEAR = 111;
	private MapActivity_Navigation activity;
	private Bitmap arrowToDestination;

	// private List<LinkedList<PlanRoutePoint>> planRoutePoints = new
	// ArrayList<LinkedList<PlanRoutePoint>>();
	//
	// private List<LinkedList<PlanRoutePoint>> savedPlanRoutePoints = new
	// ArrayList<LinkedList<PlanRoutePoint>>();

	public routeLayer(MapActivity_Navigation activity) {
		app = activity.getMyApplication();
		view = activity.getMapView();
		this.activity = activity;
	}

	@Override
	public void initLayer(OsmandMapTileView_Navigation view) {
		// System.err.println("initLayer in DistanceCalculatorLayer xxxx");
		this.view = view;
		dm = view.getResources().getDisplayMetrics();
		originIcon = BitmapFactory.decodeResource(view.getResources(),
				R.drawable.map_pin_origin);
		// originIcon = BitmapFactory.decodeResource(view.getResources(),
		// R.drawable.distance_measure_start_point_shape);

		destinationIcon = BitmapFactory.decodeResource(view.getResources(),
				R.drawable.map_pin_destination);

		bitmapPaint = new Paint();
		bitmapPaint.setDither(true);
		bitmapPaint.setAntiAlias(true);
		bitmapPaint.setFilterBitmap(true);
		path = new Path();

		int distanceColor = view.getResources()
				.getColor(R.color.distance_color);
		paint = new Paint();
		paint.setStyle(Style.STROKE);
		paint.setStrokeWidth(4 * dm.density);
		paint.setAntiAlias(true);
		paint.setStrokeCap(Cap.ROUND);
		paint.setStrokeJoin(Join.ROUND);
		paint.setColor(distanceColor);

		paint2 = new Paint();
		paint2.setStyle(Style.STROKE);
		paint2.setStrokeWidth(2);
		paint2.setAntiAlias(true);
		paint2.setColor(view.getResources().getColor(R.color.blue));

		paint_start_point = new Paint();
		paint_start_point.setStyle(Style.FILL_AND_STROKE);
		paint_start_point.setAntiAlias(true);
		paint_start_point.setColor(view.getResources().getColor(R.color.green));

		paint_mid_point = new Paint();
		paint_mid_point.setStyle(Style.FILL_AND_STROKE);
		paint_mid_point.setAntiAlias(true);
		paint_mid_point.setColor(view.getResources().getColor(R.color.blue));

		paint_end_point = new Paint();
		paint_end_point.setStyle(Style.FILL_AND_STROKE);
		paint_end_point.setAntiAlias(true);
		paint_end_point.setColor(view.getResources().getColor(R.color.red));

		paintText = new Paint();
		paintText.setTextSize(14 * view.getDensity());

		arrowToDestination = BitmapFactory.decodeResource(view.getResources(),
				R.drawable.arrow_to_destination);
	}

	// 刷新测距信息条上的信息
	private void updateText() {
		// String ds = distance;
		// if (ds != null) {
		// int ls = ds.lastIndexOf(' ');
		// if (ls != -1) {
		// //
		// view.getApplication().getMapActivity_Messure().updateTotalDistanceInfo("总计距离："
		// // + ds.substring(0, ls)+" 海里");
		// }
		// }
	}

	@Override
	public boolean onSingleTap(PointF point, RotatedTileBox tileBox) {
		 System.err.println("轻点屏幕。  routelayer");
		// 如果已经在显示保存的航线模式下，不触发轻点的动作。
		return true;
	}

	public RotatedTileBox getilebox() {
		return tilebox;
	}

	@Override
	public boolean onLongPressEvent(PointF point, RotatedTileBox tileBox) {
		// if (distanceMeasurementMode == DistanceMeasurementMode_START
		// && measurementPoints.size() > 0) {
		// LinkedList<MessurePoint> lt = measurementPoints
		// .get(measurementPoints.size() - 1);
		// if (lt.size() > 0) {
		// lt.removeLast();
		// }
		// calculateDistance();
		// view.refreshMap();
		// updateText();
		// return true;
		// }
		return false;
	}

	WptPt previous_pt;// = new WptPt() ;

	ArrayList<RecommendRoutePoints> routepoints = new ArrayList<RecommendRoutePoints>();

	public void drawRoute(ArrayList<RecommendRoutePoints> r) {
		routepoints.clear();
		if (r != null && r.size() > 0) {
			routepoints.addAll(r);
			view.refreshMapForceDraw();
			AnimateDraggingMapThread_Navigation thread = view
					.getAnimatedDraggingThread();
			double la = routepoints.get(0).getLat();
			double lo = routepoints.get(0).getLon();

			thread.startMoving(la, lo, tilebox.getZoom(), false);
		}
	}//划出规划的航线。。

	DisplayMetrics dm;

	private void drawArrow(Path path, float x1, float y1, float x2, float y2) {

		// System.out.println("drawarrow"+"x1"+x1+"x2"+x2+"y1"+y1+"y2"+y2);
		// 如果两个点之间离开的很近，就不要画箭头了。
		if (Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)) < 100)
			return;

		float nArrowHeadLength = 18 * dm.density; // 箭头的基本长度
		float nArrowHeadAngle = 15; // 箭头的夹角 15*2=30°
		nArrowHeadAngle = (float) (nArrowHeadAngle * Math.PI / 180); // radians

		float ang;
		float tang;
		float x3;
		float y3;
		float sign;

		ang = (float) Math.atan((y2 - y1) / (x2 - x1));

		// check for vertical path -> atan fails
		if ((x2 - x1) == 0) {
			if (y2 > y1)
				ang = 4.712389f; // 270 deg
			else
				ang = 1.570796f; // 90 deg
		}// 控制角度

		// if (x2 > x1 && y2 > y1) // quad 1
		// sign = -1;
		// else if (x2 <= x1 && y2 >= y1) // quad 2
		// sign = 1;
		// else if (x2 <= x1 && y2 <= y1) // quad 3
		// sign = 1;
		// else//(x2>x1&&y2<y1)
		// sign = -1;

		if (x2 > x1)
			sign = -1;
		else {
			sign = 1;
		}// 好像可以控制方向。
		tang = nArrowHeadAngle + ang;
		x3 = (float) (x2 + x1) / 2
				+ (float) (sign * (nArrowHeadLength * Math.cos(tang)));
		y3 = (float) (y2 + y1) / 2
				+ (float) (sign * (nArrowHeadLength * Math.sin(tang)));

		path.moveTo((int) (x2 + x1) / 2, (int) (y2 + y1) / 2);
		// System.out.println("draw arrow  moveTo");
		path.lineTo((int) x3, (int) y3);
		// System.out.println("draw arrow  lineTo");
		path.moveTo((int) (x2 + x1) / 2, (int) (y2 + y1) / 2);
		// System.out.println("draw arrow  moveTo1");
		tang = nArrowHeadAngle - ang;
		x3 = (float) (x2 + x1) / 2
				+ (float) (sign * (nArrowHeadLength * Math.cos(tang)));
		y3 = (float) (y2 + y1) / 2
				+ (float) (-sign * (nArrowHeadLength * Math.sin(tang)));
		path.lineTo((int) x3, (int) y3);
	}

	@Override
	public void onPrepareBufferImage(Canvas canvas, RotatedTileBox tileBox,
			DrawSettings settings) {
		this.tilebox = tileBox;
		path.reset();
		// System.err.println("单击选点图层： "+savedPlanRoutePoints==null?"yes":"no");

		// 如果有需要显示的保存的轨迹，那么优先显示。
		if (routepoints != null && routepoints.size() > 0) {
			// Print.print("如果有需要显示的保存的轨迹，那么优先显示。"+routepoints.size());
			boolean first = true;
			int X1 = 0;
			int Y1 = 0;
			for (int i = 0; i < routepoints.size(); i++) {
				RecommendRoutePoints point = routepoints.get(i);
				int locationX = tileBox.getPixXFromLonNoRot(point.getLon());
				int locationY = tileBox.getPixYFromLatNoRot(point.getLat());
				if (first) {
					path.moveTo(locationX, locationY);
					canvas.drawCircle(locationX, locationY, 2, paint);
					// Print.print("zheshi 1"+"x1 "+locationX+"y1 "+locationY);
					X1 = locationX;
					Y1 = locationY;
					first = false;
				} else {
					if (i >= 1) {
						// int X1 =
						// tileBox.getPixXFromLonNoRot(routepoints.get(i-1).getLon());
						// int Y1 =
						// tileBox.getPixYFromLatNoRot(routepoints.get(i-1).getLat());
						// Print.print("zheshi "+"x1 "+locationX+"y1 "+locationY);
						drawArrow(path, X1, Y1, locationX, locationY);
						path.moveTo(X1, Y1);
					}
					canvas.drawCircle(locationX, locationY, 2, paint);
					path.lineTo(locationX, locationY);
					X1 = locationX;
					Y1 = locationY;
				}
				if (i == routepoints.size() - 1) {
					canvas.drawPath(path, paint2);
				}
			}
		}
		// Print.print("zheshi 结束");
	}

	private float[] calculations = new float[2];
	protected final static int DIST_TO_SHOW = 80;

	public boolean isLocationVisible(RotatedTileBox tb, LatLon p) {
		if (p == null || tb == null) {
			return false;
		}
		return tb.containsLatLon(p.getLatitude(), p.getLongitude());
	}

	String distance;
	String bearing;

	private void calculatorTowPointsDistanceAndBearing(WptPt pt1, WptPt pt2) {
		float dist = (float) MapUtils.getDistance(pt1.lat, pt1.lon, pt2.lat,
				pt2.lon);
		bearing = OsmAndFormatter.getFormattedBearing(MapUtils.getBearing(
				pt1.lat, pt1.lon, pt2.lat, pt2.lon)) + "°";
		distance = OsmAndFormatter.getFormattedDistance(dist, app);
	}

	@Override
	public void onDraw(Canvas canvas, RotatedTileBox tileBox,
			DrawSettings settings) {

	}

	@Override
	public void destroyLayer() {
	}

	@Override
	public boolean drawInScreenPixels() {
		return false;
	}

	@Override
	public void collectObjectsFromPoint(PointF point, RotatedTileBox tileBox,
			List<Object> o) {
	}

	private boolean calculateBelongsBig(int ex, int ey, int objx, int objy,
			int radius) {
		return Math.abs(objx - ex) <= radius && (ey - objy) <= radius / 2
				&& (objy - ey) <= 3 * radius;
	}

	private boolean calculateBelongsSmall(int ex, int ey, int objx, int objy,
			int radius) {
		return Math.abs(objx - ex) <= radius && Math.abs(ey - objy) <= radius;
	}

	@Override
	public LatLon getObjectLocation(Object o) {
		if (o instanceof WptPt) {
			return new LatLon(((WptPt) o).lat, ((WptPt) o).lon);
		}
		return null;
	}

	@Override
	public String getObjectDescription(Object o) {
		if (o instanceof WptPt) {
			String desc = getObjectName(o);

			return desc;
		}
		return null;
	}

	@Override
	public String getObjectName(Object o) {
		if (o instanceof WptPt) {
			if (((WptPt) o).desc == null) {
				return app.getString(R.string.plugin_distance_point);
			}
			return ((WptPt) o).desc;
		}
		return null;
	}

}
