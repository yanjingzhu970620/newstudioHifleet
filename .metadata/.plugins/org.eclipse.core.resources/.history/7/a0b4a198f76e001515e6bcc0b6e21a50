package com.hifleet.activity;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.Executors;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnClickListener;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Message;
import android.view.View;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.hifleet.R;
import com.hifleet.activity.GetInportShipsActivity.LodingInportShipsThread;
import com.hifleet.adapter.ChooseShipAdapter;
import com.hifleet.adapter.PortListAdapter;
import com.hifleet.adapter.PortShipsAdapter;
import com.hifleet.adapter.ShipsListAdapter;
import com.hifleet.bean.HeartBeatBean;
import com.hifleet.bean.InportShipsBean;
import com.hifleet.bean.PortBean;
import com.hifleet.bean.loginSession;
import com.hifleet.map.IndexConstants;
import com.hifleet.map.OsmandApplication;
import com.hifleet.thread.MyTeamShipsThread;
import com.hifleet.thread.UserLogout;
import com.hifleet.utility.XmlParseUtility;
import com.hifleet.widget.DateTimePickDialogUtil;

/**
 * @{# ShipSimpleDetailActivity.java Create on 2015年7月15日 下午4:22:41
 * 
 * @author <a href="mailto:evan0502@qq.com">Evan</a>
 * @version 1.0
 * @description
 *
 */
public class PortShipsActivity extends Activity {
	
	
	private ListView mSimpleDetailList;
	TextView pagecount;
	private PortShipsAdapter mAdapter;
	public static RelativeLayout progressLoading;
	
	OsmandApplication app;
	
	public static List<InportShipsBean> inportships = new ArrayList<InportShipsBean>();
	private List<HeartBeatBean> heartBeatBean = new ArrayList<HeartBeatBean>();
	private int limit1=0;
	private int limit2=10;
	private int pcount=1;
	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onCreate(android.os.Bundle)
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
//		System.out.println("portShipsActivity oncreate");
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_choose_ship);
       limit1=0;
       limit2=10;
		mSimpleDetailList = (ListView) findViewById(R.id.list_ship_simple_detail);
		pagecount=(TextView) findViewById(R.id.portships_pagecount);
//		progress = (ProgressBar) findViewById(R.id.progress);
		progressLoading = (RelativeLayout) findViewById(R.id.progress_ships_loading);
		if(app.myPreferences.getString("portships", "").equals("GetInportShipsActivity")){
		mAdapter = new PortShipsAdapter(this, GetInportShipsActivity.inportships);
		}else if(app.myPreferences.getString("portships", "").equals("GetArriveShipsActivity")){
			mAdapter = new PortShipsAdapter(this, GetArriveShipsActivity.inportships);
		}else if(app.myPreferences.getString("portships", "").equals("GetWillArriveShipsActivity")){
			mAdapter = new PortShipsAdapter(this, GetWillArriveShipsActivity.inportships);
		}
		mSimpleDetailList.setAdapter(mAdapter);
	}

	public void onClick(View view) {
		switch (view.getId()) {
		case R.id.ll_back:
			finish();
			break;
		case R.id.last_page:
			if(limit1==0){
				Toast.makeText(getBaseContext(), "已经是第一页", Toast.LENGTH_LONG).show();
			}else{
				limit1=limit1-10;
				pcount--;
			}
			if(inportships!=null){
				inportships.clear();
				}
			closeReqest1();
			String uuid = UUID.randomUUID().toString();
			if(app.myPreferences.getString("portships", "").equals("GetInportShipsActivity")){
			LodingInportShipsThread LodingShips=new LodingInportShipsThread();
			taskmap.put(uuid, LodingShips);
			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
				// print("MoreActivity 》 Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB");
				LodingShips.executeOnExecutor(
						Executors.newCachedThreadPool(), new String[0]);
			} else {
				LodingShips.execute();
			}
			}else if(app.myPreferences.getString("portships", "").equals("GetArriveShipsActivity")){
				LodingArrivePortShipsThread LodingShips=new LodingArrivePortShipsThread();
				ataskmap.put(uuid, LodingShips);
				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
					// print("MoreActivity 》 Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB");
					LodingShips.executeOnExecutor(
							Executors.newCachedThreadPool(), new String[0]);
				} else {
					LodingShips.execute();
				}
			}else if(app.myPreferences.getString("portships", "").equals("GetWillArriveShipsActivity")){
				LodingWillArrivePortShipsThread LodingShips=new LodingWillArrivePortShipsThread();
				ataskmap.put(uuid, LodingShips);
				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
					// print("MoreActivity 》 Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB");
					LodingShips.executeOnExecutor(
							Executors.newCachedThreadPool(), new String[0]);
				} else {
					LodingShips.execute();
				}
			}
			progressLoading.setVisibility(View.VISIBLE);
			break;
		case R.id.next_page:
			if(limit2==0){
				Toast.makeText(getBaseContext(), "已经是第一页", Toast.LENGTH_LONG).show();
			}else{
				limit1=limit1+10;
				pcount++;
//				pagecount.setText("第"+pcount+"页");
			}
			if(inportships!=null){
				inportships.clear();
				}
			closeReqest1();
			String uuid1 = UUID.randomUUID().toString();
			if(app.myPreferences.getString("portships", "").equals("GetInportShipsActivity")){
			LodingInportShipsThread LodingShips1=new LodingInportShipsThread();
			taskmap.put(uuid1, LodingShips1);
			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
				// print("MoreActivity 》 Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB");
				LodingShips1.executeOnExecutor(
						Executors.newCachedThreadPool(), new String[0]);
			} else {
				LodingShips1.execute();
			}
			}else if(app.myPreferences.getString("portships", "").equals("GetArriveShipsActivity")){
				LodingArrivePortShipsThread LodingShips1=new LodingArrivePortShipsThread();
				ataskmap.put(uuid1, LodingShips1);
				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
					// print("MoreActivity 》 Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB");
					LodingShips1.executeOnExecutor(
							Executors.newCachedThreadPool(), new String[0]);
				} else {
					LodingShips1.execute();
				}
			}else if(app.myPreferences.getString("portships", "").equals("GetWillArriveShipsActivity")){
				
			}
			progressLoading.setVisibility(View.VISIBLE);
			break;
		}
	}
	
	
	private HashMap<String, LodingInportShipsThread> taskmap = new HashMap<String, LodingInportShipsThread>();
	private HashMap<String, LodingArrivePortShipsThread> ataskmap = new HashMap<String, LodingArrivePortShipsThread>();
	private void closeReqest1() {
		if(app.myPreferences.getString("portships", "").equals("GetInportShipsActivity")){
		if (taskmap.isEmpty())
			return;
		Iterator<String> it = taskmap.keySet().iterator();
		while (it.hasNext()) {
			String uuid = it.next();
			LodingInportShipsThread task = taskmap.get(uuid);
			task.cancel(true);
		}
		}else if(app.myPreferences.getString("portships", "").equals("GetArriveShipsActivity")){
			if (ataskmap.isEmpty())
				return;
			Iterator<String> it = ataskmap.keySet().iterator();
			while (it.hasNext()) {
				String uuid = it.next();
				LodingArrivePortShipsThread task = ataskmap.get(uuid);
				task.cancel(true);
			}
		}else if(app.myPreferences.getString("portships", "").equals("GetWillArriveShipsActivity")){
			
		}
	}
	private void parseXMLnew(InputStream inStream) throws Exception {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		Document document = builder.parse(inStream);
		Element root = document.getDocumentElement();
		NodeList childNodes = root.getChildNodes();
		heartBeatBean.clear();
		if (root.getNodeName().compareTo("session__timeout") == 0) {
			heartBeatBean.add(XmlParseUtility.parse(root, HeartBeatBean.class));
		}

		for (int j = 0; j < childNodes.getLength(); j++) {
			Node childNode = (Node) childNodes.item(j);
			if (childNode.getNodeType() == Node.ELEMENT_NODE) {
				Element childElement = (Element) childNode;
//				if (childElement.getNodeName().compareTo("port") == 0) {
//					allsearchPortBean.add(XmlParseUtility.parse(childElement,
//							PortBean.class));
//				}
				if (childElement.getNodeName().compareTo("InPortShips") == 0) {
					InportShipsBean is=new InportShipsBean();
					NodeList childNodes2 =childElement.getChildNodes();
					for(int b=0;b<childNodes2.getLength();b++){
						Node childNode2 = (Node) childNodes2.item(b);
						Element childElement2 = (Element) childNode2;
						if (childElement2.getNodeName().compareTo("mmsi") == 0) {
							is.mmsi=childElement2.getTextContent();
//							System.out.println("解析的inportships mmsi"+is.mmsi);
						}
						if (childElement2.getNodeName().compareTo("shipname") == 0) {
							is.shipname=childElement2.getTextContent();
//							System.out.println("解析的inportships shipname"+is.shipname);
						}
						if (childElement2.getNodeName().compareTo("updatetime") == 0) {
							is.updatetime=childElement2.getTextContent();
						}
						if (childElement2.getNodeName().compareTo("ansub") == 0) {
							is.ansub=childElement2.getTextContent();
						}
						if (childElement2.getNodeName().compareTo("dwt") == 0) {
							is.dwt=childElement2.getTextContent();
						}
						if (childElement2.getNodeName().compareTo("type") == 0) {
							is.type=childElement2.getTextContent();
						}
						if (childElement2.getNodeName().compareTo("dataflag") == 0) {
							is.dataflag=childElement2.getTextContent();
						}
					}
					inportships.add(is);
//					System.out.println("解析的inportships"+is.mmsi);
				}
				if (childElement.getNodeName().compareTo("ArrivePortShips") == 0) {
					InportShipsBean is=new InportShipsBean();
					NodeList childNodes2 =childElement.getChildNodes();
					for(int b=0;b<childNodes2.getLength();b++){
						Node childNode2 = (Node) childNodes2.item(b);
						Element childElement2 = (Element) childNode2;
						if (childElement2.getNodeName().compareTo("mmsi") == 0) {
							is.mmsi=childElement2.getTextContent();
//							System.out.println("解析的inportships mmsi"+is.mmsi);
						}
						if (childElement2.getNodeName().compareTo("shipname") == 0) {
							is.shipname=childElement2.getTextContent();
//							System.out.println("解析的inportships shipname"+is.shipname);
						}
						if (childElement2.getNodeName().compareTo("updatetime") == 0) {
							is.updatetime=childElement2.getTextContent();
						}
						if (childElement2.getNodeName().compareTo("ansub") == 0) {
							is.ansub=childElement2.getTextContent();
						}
						if (childElement2.getNodeName().compareTo("dwt") == 0) {
							is.dwt=childElement2.getTextContent();
						}
						if (childElement2.getNodeName().compareTo("type") == 0) {
							is.type=childElement2.getTextContent();
						}
						if (childElement2.getNodeName().compareTo("dataflag") == 0) {
							is.dataflag=childElement2.getTextContent();
						}
						if (childElement2.getNodeName().compareTo("triggertime") == 0) {
							is.triggertime=childElement2.getTextContent();
						}
					}
					inportships.add(is);
//					System.out.println("解析的inportships"+is.mmsi);
				}
			}
			// System.out.println("allsearchPortBean"+allsearchPortBean.size());
//			Message message = new Message();
//			message.what = REFRESH;
//			handler.sendMessage(message);
		}
	}
	
	class LodingInportShipsThread extends AsyncTask<String, Void, Void> {
		/*
		 * (non-Javadoc)
		 * 
		 * @see android.os.AsyncTask#doInBackground(java.lang.Object[])
		 */
		@Override
		protected Void doInBackground(String... params) {
			// TODO Auto-generated method stub
			try {
				String httpPost = app.myPreferences.getString("loginserver",
						null) + IndexConstants.INPORT_SHIPS_URL + GetInportShipsActivity.sdwt+"&limit1="+limit1+"&limit2="+limit2+"&portcode="+
						PortListAdapter.mPort.getPortCode()+"&type="+GetInportShipsActivity.stype;
				System.out.println(httpPost);
				URL shipsUrl = new URL(httpPost);
				HttpURLConnection conn = (HttpURLConnection) shipsUrl
						.openConnection();
				if (loginSession.getSessionid() != null) {
					conn.setRequestProperty("cookie",
							loginSession.getSessionid());
				} else {
					conn.setRequestProperty("cookie",
							app.myPreferences.getString("sessionid", ""));
				}
				conn.setConnectTimeout(10000);
				InputStream inStream = conn.getInputStream();
				parseXMLnew(inStream);
				inStream.close();
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("未能获取网络数据");
				e.printStackTrace();
			}
			return null;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see android.os.AsyncTask#onPostExecute(java.lang.Object)
		 */
		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			if (inportships.size() > 0) {
				
				mAdapter = new PortShipsAdapter(PortShipsActivity.this,inportships);
				mSimpleDetailList.setAdapter(mAdapter);
				pagecount.setText("第"+pcount+"页");
//				progress.setVisibility(View.GONE);
//				System.out.println("获得了："+inportships.size() +"进行刷新");
//				Intent intent = new Intent(GetInportShipsActivity.this, PortShipsActivity.class);
//				System.out.println("点击了："+"进行跳转");
//				progress.setVisibility(View.GONE);
				progressLoading.setVisibility(View.GONE);
//				GetInportShipsActivity.this.startActivity(intent);
				// ((SearchActivity) context).finish();
			} else {
				progressLoading.setVisibility(View.GONE);
				Toast.makeText(getBaseContext(), "暂无在港船舶", Toast.LENGTH_LONG).show();
			}
			
			for (HeartBeatBean h : heartBeatBean) {
				if (Integer.valueOf(h.flag).intValue() == 0) {
					System.out.println(h.message);
					UserLogout thread = null;
					thread = new UserLogout();
					if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
						// print("MoreActivity 》 Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB");
						thread.executeOnExecutor(
								Executors.newCachedThreadPool(), new String[0]);
					} else {
						thread.execute();
					}
					new AlertDialog.Builder(PortShipsActivity.this).setTitle("提示")
							.setCancelable(false)
							.setMessage("会话超时或账号在其他计算机登录！")
							.setNegativeButton("确定", new OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub
									app.mEditor.putInt("isAutoLogin", 2)
											.commit();
									Intent intent = new Intent(PortShipsActivity.this,
											LoginActivity.class);
									startActivity(intent);
									app.getInstance().exit();
								}
							}).show();
					return;
				}
			}
//			progress.setVisibility(View.GONE);
		}
	}
	
	class LodingArrivePortShipsThread extends AsyncTask<String, Void, Void> {
		/*
		 * (non-Javadoc)
		 * 
		 * @see android.os.AsyncTask#doInBackground(java.lang.Object[])
		 */
		@Override
		protected Void doInBackground(String... params) {
			// TODO Auto-generated method stub
			try {
				String httpPost = app.myPreferences.getString("loginserver",
						null) + IndexConstants.ARRIVEPORT_SHIPS_URL + GetArriveShipsActivity.sdwt+"&limit1="+limit1+"&limit2="+limit2+"&portcode="+
						PortListAdapter.mPort.getPortCode()+"&type="+GetArriveShipsActivity.stype;
				System.out.println(httpPost);
				URL shipsUrl = new URL(httpPost);
				HttpURLConnection conn = (HttpURLConnection) shipsUrl
						.openConnection();
				if (loginSession.getSessionid() != null) {
					conn.setRequestProperty("cookie",
							loginSession.getSessionid());
				} else {
					conn.setRequestProperty("cookie",
							app.myPreferences.getString("sessionid", ""));
				}
				conn.setConnectTimeout(10000);
				InputStream inStream = conn.getInputStream();
				parseXMLnew(inStream);
				inStream.close();
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("未能获取网络数据");
				e.printStackTrace();
			}
			return null;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see android.os.AsyncTask#onPostExecute(java.lang.Object)
		 */
		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			if (inportships.size() > 0) {
				mAdapter = new PortShipsAdapter(PortShipsActivity.this,inportships);
				mSimpleDetailList.setAdapter(mAdapter);
				pagecount.setText("第"+pcount+"页");
				progressLoading.setVisibility(View.GONE);
			} else {
				progressLoading.setVisibility(View.GONE);
				Toast.makeText(getBaseContext(), "暂无抵港船舶", Toast.LENGTH_LONG).show();
			}
			
			for (HeartBeatBean h : heartBeatBean) {
				if (Integer.valueOf(h.flag).intValue() == 0) {
					System.out.println(h.message);
					UserLogout thread = null;
					thread = new UserLogout();
					if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
						// print("MoreActivity 》 Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB");
						thread.executeOnExecutor(
								Executors.newCachedThreadPool(), new String[0]);
					} else {
						thread.execute();
					}
					new AlertDialog.Builder(PortShipsActivity.this).setTitle("提示")
							.setCancelable(false)
							.setMessage("会话超时或账号在其他计算机登录！")
							.setNegativeButton("确定", new OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub
									app.mEditor.putInt("isAutoLogin", 2)
											.commit();
									Intent intent = new Intent(PortShipsActivity.this,
											LoginActivity.class);
									startActivity(intent);
									app.getInstance().exit();
								}
							}).show();
					return;
				}
			}
//			progress.setVisibility(View.GONE);
		}
	}

	class LodingWillArriveShipsThread extends AsyncTask<String, Void, Void> {
		/*
		 * (non-Javadoc)
		 * 
		 * @see android.os.AsyncTask#doInBackground(java.lang.Object[])
		 */
		@Override
		protected Void doInBackground(String... params) {
			// TODO Auto-generated method stub
			try {
				String httpPost = app.myPreferences.getString("loginserver",
						null) + IndexConstants.WILLARRIVEPORT_SHIPS_URL + GetWillArriveShipsActivity.sdwt+"starttime"+
						GetWillArriveShipsActivity.stime+"endtime"+GetWillArriveShipsActivity.etime+"&limit1="+"0"+"&limit2="+"10"+"&portcode="+
						PortListAdapter.mPort.getPortCode()+"&type="+GetWillArriveShipsActivity.stype;
				System.out.println(httpPost);
				URL shipsUrl = new URL(httpPost);
				HttpURLConnection conn = (HttpURLConnection) shipsUrl
						.openConnection();
				if (loginSession.getSessionid() != null) {
					conn.setRequestProperty("cookie",
							loginSession.getSessionid());
				} else {
					conn.setRequestProperty("cookie",
							app.myPreferences.getString("sessionid", ""));
				}
				conn.setConnectTimeout(10000);
				InputStream inStream = conn.getInputStream();
				parseXMLnew(inStream);
				inStream.close();
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("未能获取网络数据");
				e.printStackTrace();
			}
			return null;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see android.os.AsyncTask#onPostExecute(java.lang.Object)
		 */
		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			if (inportships.size() > 0) {
				mAdapter = new PortShipsAdapter(PortShipsActivity.this,inportships);
				mSimpleDetailList.setAdapter(mAdapter);
				pagecount.setText("第"+pcount+"页");
				progressLoading.setVisibility(View.GONE);
			} else {
				progressLoading.setVisibility(View.GONE);
				Toast.makeText(getBaseContext(), "暂无将要抵港船舶", Toast.LENGTH_LONG).show();
			}
			
			for (HeartBeatBean h : heartBeatBean) {
				if (Integer.valueOf(h.flag).intValue() == 0) {
					System.out.println(h.message);
					UserLogout thread = null;
					thread = new UserLogout();
					if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
						// print("MoreActivity 》 Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB");
						thread.executeOnExecutor(
								Executors.newCachedThreadPool(), new String[0]);
					} else {
						thread.execute();
					}
					new AlertDialog.Builder(activity).setTitle("提示")
							.setCancelable(false)
							.setMessage("会话超时或账号在其他计算机登录！")
							.setNegativeButton("确定", new OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub
									app.mEditor.putInt("isAutoLogin", 2)
											.commit();
									Intent intent = new Intent(activity,
											LoginActivity.class);
									startActivity(intent);
									app.getInstance().exit();
								}
							}).show();
					return;
				}
			}
//			progress.setVisibility(View.GONE);
		}
	}
}
